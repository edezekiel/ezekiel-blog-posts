{
  "fields": [
    "id",
    "title",
    "text",
    "date",
    "image",
    "created_at",
    "updated_at"
  ],
  "posts": [
    [
      7,
      "How Do I Start a Blog?",
      "\u003cp\u003eWelcome to the inaugural post! For my first project, I will walk through how I set up this blog. There are four basic steps: (1) choose your web hosting service, (2) pick a domain name, (3) create an html file, and (4) upload the file.\u003c/p\u003e\n\u003cdl\u003e\n  \u003cp\u003e\u003cdt\u003e1. Choose a Web Hosting Service\u003c/dt\u003e\n  \u003cdd\u003e\u003ca href=\"https://hostingfacts.com/\"\u003eHostingfacts.com\u003c/a\u003e recently published its list of the \"10 Best Web Hosting Services in 2018.\" They listed Bluehost as #1 for best reliability. After doing a bit more research I decided to go with Bluehost. \u003c/dd\u003e\u003c/p\u003e\n  \u003cp\u003e\u003cdt\u003e2. Pick a Domain Name\u003c/dt\u003e\n  \u003cdd\u003eMy next step was picking a domain name (edezekiel.com).\u003c/dd\u003e\u003c/p\u003e\n  \u003cp\u003e\u003cdt\u003e3. Create the HTML File\u003c/dt\u003e\n  \u003cdd\u003eI used Sublime to create this html file. I named the file \"index.html.\"\u003c/dd\u003e\u003c/p\u003e\n  \u003cp\u003e\u003cdt\u003e4. Upload the HTML File\u003c/dt\u003e\n  \u003cdd\u003eThis step was my biggest hurdle, but I found a great tutorial on youtube at \u003ca href=\"https://www.youtube.com/watch?v=XUmfXTnFMuw\"\u003e\u003cspan\u003edancourses\u003c/span\u003e\u003c/a\u003e. Dan explains the cpanel and File Transfer Protocol (FTP) methods for uploading a HTML file. Cpanel is a linux webhost used by Bluehost and other web hosting services. You can log into cpanel by adding \"/cpanel\" to the end of your website name (e.g., \"www.edezekiel.com/cpanel\"). FTP creates a connection between a computer and a hosting account. Cpanel got the job done for now, but I will use FTP as my website grows.\u003c/dd\u003e\u003c/p\u003e\n\u003c/dl\u003e\n\u003cp\u003eThank you for reading. I have a lot of exciting posts for this blog coming soon, and I can't wait to see where this project takes me.\u003c/p\u003e\n",
      "October 5, 2018",
      "https://images.unsplash.com/photo-1482376297902-a54c222cec2b?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=2700\u0026q=80",
      "2019-01-25 19:41:58.864045",
      "2019-01-25 19:41:58.864045"
    ],
    [
      8,
      "CSS Styling Using Flexbox",
      "\u003cp\u003eThis week I added some style to my blog using CSS and Flexbox. This post summarizes these concepts and describes how I applied them to my site.\u003c/p\u003e\n\u003cp\u003eCSS stands for Cascading-Style-Sheets. CSS is a language for specifying how documents are presented to users -- how they are styled, laid out, etc.\u003c/p\u003e\n\u003cp\u003eThe Flexible Box Module (Flexbox) is a new layout mode that was introduced CSS3. See this article by spaceninja, \u003ca href=\"https://spaceninja.com/2015/08/24/what-is-flexbox/\"\u003e\u003cspan\u003e\"What is Flexbox, An elegant layout method for a more civilized age\",\u003c/span\u003e\u003c/a\u003e for a great background on the origin and purpose of Flexbox.\u003c/p\u003e\n\u003cp\u003eWhen a browser displays a document, it actually displays a combination of the document's content with its style information. Web browsers convert the document's content (the HTML) and style information (CSS) into the Document Object Model (DOM). When you view a webpage you are actually viewing a display of the contents of the DOM.\u003c/p\u003e\n\u003cp\u003eI created the CSS style sheet and linked it to my HMTL file. Then I used a great guide from \u003ca href='https://markheath.net/post/simple-css-blog-layout-flexbox'\u003e\u003cspan\u003emarkheath.net\u003c/span\u003e\u003c/a\u003e to incorporate Flexbox concepts into the CSS and HTML files.\u003c/p\u003e\n",
      "October 12, 2018",
      "https://images.unsplash.com/photo-1472437774355-71ab6752b434?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=3367\u0026q=80",
      "2019-01-25 19:44:19.681526",
      "2019-01-25 19:44:19.681526"
    ],
    [
      9,
      "Navbars and Site Banners",
      "\u003cp\u003eFlatiron's software engineering immersive program in Atlanta starts in just a few days and I could not be more excited. So excited that I'm doing a mid-week update to the site! The main changes include removing Flexbox (for now), adding a functional navigation bar, adding a \"hero banner,\" and incorporating google analytics.\u003c/p\u003e\n\n\u003cp\u003e\u003cdt\u003eFlexbox\u003c/dt\u003e\u003cdd\u003eI had a lot of fun working with Flexbox while writing my last post. However, I removed the Flexbox display to see how much I could do with just HTML and CSS's normal flow. As it turns out, everything you see here can be developed without Flexbox.\u003c/dd\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdt\u003eNavigation Bar\u003c/dt\u003e\u003cdd\u003eCreating the navigation bar took a bit of trial and error. I eventually landed on sleek \u003ca href=\"https://wearefieldtrip.com/journal/css-horizontal-navigation-bar/\"\u003enavbar tutorial\u003c/a\u003e from Fieldtrip. The instructions were clear and concise.\u003c/dd\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cdt\u003eThe Banner\u003c/dt\u003e\u003cdd\u003eA hero banner, like the image above, is a very large banner image used in website design to help engage users. Sites like \u003ca href=\"https://www.webdesignerdepot.com/\"\u003eWebdesignerdepot\u003c/a\u003e and \u003ca href=\"https://www.artonicweb.com/learn/hero-images/\"\u003eartonic\u003c/a\u003e have great examples. This \u003ca href=\"https://www.youtube.com/watch?v=tb_EwQOa_ao\"\u003etutorial\u003c/a\u003e on youtube was a good guide.\u003c/dd\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cdt\u003eGoogle Analytics\u003c/dt\u003e\u003cdd\u003eIf you right click and \"View Page Source,\" you might notice a \"google-site-verification\" item in the \u003ccode\u003ehead\u003c/code\u003e. I set up the verification and google analytics for this site after watching \u003ca href=\"https://www.youtube.com/watch?v=El3IZFGERbM\"\u003evideo by Maile Ohye\u003c/a\u003e from google webmasters.\u003c/dd\u003e\u003c/p\u003e\n\n\u003cp\u003eI hope you enjoyed reading this post. I'll be back soon with more updates about my software engineering journey.\u003c/p\u003e\n",
      "October 17, 2018",
      "https://images.unsplash.com/photo-1518976977648-12e3cd088aae?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=4650\u0026q=80",
      "2019-01-25 21:45:38.500055",
      "2019-01-25 21:45:38.500055"
    ],
    [
      10,
      "Implementing CSS Grid",
      "\u003cp\u003eT-minus five days until I start the Flatiron bootcamp. I took a break\nfrom some Git exercise to bring you all this update!\u003c/p\u003e\n\n\u003cp\u003eI have made a lot of changes to this site under the hood. Mainly, I\nconverted the content section to the CSS \"grid\" display style.\nI also switched the navbar back to using Flexbox.\u003c/p\u003e\n\n\u003cp\u003eIf you're on a laptop or desktop, expand the browser to full screen\nand you'll notice that blog posts now line up in rows and columns. On a\nmobile device, the posts will collapse into a single column. This is all\nthanks to CSS Grid!\u003c/p\u003e\n\n\u003cp\u003eNow that the main content is laid out in a grid system, it will be\nmuch easier to make the website more \"responsive.\" I'll cover responsive\nweb design in more detail soon.\u003c/p\u003e\n\n\u003cp\u003eThank you for reading and have a great week. \u003c/p\u003e\n",
      "October 25, 2018",
      "https://cdn-images-1.medium.com/max/1600/1*bFks7KtDCY3Gi4YmJDdbVQ.jpeg",
      "2019-01-25 21:46:33.730679",
      "2019-01-25 21:46:33.730679"
    ],
    [
      11,
      "Flatiron Week One, File Transfer Protocol",
      "\u003cp\u003eI'm in week one of the Flatiron bootcamp! I'm writing this on\n  Friday afternoon.\u003c/p\u003e\n\n\u003cp\u003eMy substantive update for this post is that I finally implemented\n  (Safe) File Transfer Protocol. I used a guide from\n  \u003ca href=\"https://kb.iu.edu/d/akom\"\u003eIndiana University\u003c/a\u003e. SFTP\n  makes uploading the website files much faster.\n\u003c/p\u003e\n\u003cp\u003eSo much has happened in five days, but here are some of my main\nthoughts:\u003c/p\u003e\n\u003cp\u003e\u003cdt\u003eCohort\u003c/dt\u003e\n  \u003cdd\u003eThe first cohort is small.\u003c/dd\u003e\n  \u003cdd\u003eThere are 7 other people in cohort (Kwam, Andy, Blair, Cory, Paris, Will,\n    and Kaeland).\u003c/dd\u003e\n  \u003c/p\u003e\n\u003cp\u003e\u003cdt\u003eTopics\u003c/dt\u003e\n  \u003cdd\u003eWe went straight to Ruby, Git, and Bash.\u003c/dd\u003e\n  \u003cdd\u003e\u003c/dd\u003e\n\u003cp\u003e\u003cdt\u003eSchedule\u003c/dt\u003e\n  \u003cdd\u003eClasses really do run from 9:00 a.m. until 6:00 p.m.\u003c/dd\u003e\n  \u003cdd\u003eI haven't left campus before 6:30 p.m.\u003c/dd\u003e\n  \u003c/p\u003e\n\u003cp\u003e\u003cdt\u003eHomework\u003c/dt\u003e\n  \u003cdd\u003eThe instructors deploy new labs after class gets out.\u003c/dd\u003e\n  \u003cdd\u003eWe used concepts from those labs the next day.\u003c/dd\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdt\u003ePair Programing\u003c/dt\u003e\n  \u003cdd\u003eWe've already used pair programming.\u003c/dd\u003e\n  \u003cdd\u003eYesterday, we paired up to work on a lab. We learned how pair programming\n    traditionally involves a \"navigator\" and a \"driver,\" and got the chance to\n    implement this process to solve a lab.\u003c/dd\u003e\n  \u003c/p\u003e\n\u003cp\u003e\u003cdt\u003eActive Learning\u003c/dt\u003e\n  \u003cdd\u003eMost of the day is spent on active learning.\u003c/dd\u003e\n  \u003cdd\u003eThere are lectures, but they only last for an hour or two in the mornings.\u003c/dd\u003e\n  \u003cdd\u003e We spend the rest of the day working on labs and helping each other out\n    with debugging.\u003c/dd\u003e\n  \u003c/p\u003e",
      "November 2, 2018",
      "https://images.unsplash.com/photo-1533664845046-2a66954ce5f7?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=1625\u0026q=80",
      "2019-01-25 21:48:23.803298",
      "2019-01-25 21:48:23.803298"
    ],
    [
      28,
      "My Capstone Full-Stack Web App: YouTube Academy",
      "      \u003cp\u003eIt's official, I have graduated from Flatiron's Web Development bootcamp!I am so incredibly grateful for the passionate Flatiron students and\n      staff that have helped me along this journey.\u003c/p\u003e\n      \n\u003cimg src=\"https://media.giphy.com/media/zD2SpVI4vBLeo/giphy.gif\" /\u003e\n\n      \u003cp\u003ePart of graduation is\n      building a capstone project. This blog post introduces my Flatiron\n      capstone project, explains my inspiration for building the site, and\n      summarizes the site's architecture.\u003c/p\u003e\n\n    \u003ch1\u003eYouTube Academy\u003c/h1\u003e\n\n      \u003cp\u003eMy capstone project at Flatiron is \u003ca href=\"https://youtube-academy.netlify.com\"\u003eYouTube Academy\u003c/a\u003e,\n      which is a React/Rails Single Page Application that leverages Google's\n      OAuth2 for authentication and the YouTube API to search and play videos.\n      The app takes YouTube instructional videos to the next level.\u003c/p\u003e\n\n    \u003ch1\u003eMy Inspiration For Building the Site\u003c/h1\u003e\n\n      \u003cp\u003eLet's say you are watching a YouTube video about Closure in\n      Javascript. My app lets you take notes while you watch the video, and\n      save your notes for future reference to enhance your learning.\u003c/p\u003e\n\n      \u003cp\u003eThe example above is actually my personal inspiration for making this site.\n      I watched a ton of YouTube videos about programming at Flatiron, but as a recovering\n      attorney I can't help but take notes. We're in the 21st century, so I wanted\n      a way to save my notes alongside the YouTube video in a programmatic way.\u003c/p\u003e\n\n    \u003ch1\u003eAuthentication and YouTube API\u003c/h1\u003e\n\n      \u003cp\u003eMy favorite features of the app are the \"Login With Google\" button\n      and the site's ability to pull videos from YouTube.\u003c/p\u003e\n\n      \u003cp\u003eThe \"Login With Google\" button implements OAuth2 by calling on the\n        Google Auth API and prompting the user to sign in using their Google\n        Account. If the user successfully signs into their Google account, Google\n        sends the client an id_token. The front-end sends that id_token to the\n        backend of my app. My backend then checks whether the token is valid. If\n        it is, the user is logged in.\u003c/p\u003e\n\n      \u003cp\u003eThe site pulls YouTube videos by making requests to the YouTube API. Google\n        provides instructions on how to obtain an API key and how to add client-side\n        scripting to make requests. See \u003ca href=\"https://developers.google.com/youtube/v3/getting-started\"\u003eGetting Started\u003c/a\u003e.\n      \u003c/p\u003e\n\n    \u003ch1\u003eThe Frontend\u003c/h1\u003e\n\n      \u003cp\u003eThe Front End uses React and Redux and is hosted on Netlify. I followed\n      the Container/Presentational approach to separating React Components, and\n      centralized state within a Redux store. \u003c/p\u003e\n\n      \u003cp\u003eOne tweak is that I separated forms out into their own folder. This\n      approach simplified my app and streamlined the code for my forms.\n      Also, I separated out various functions in a \"utils\" folder to make them\n      more composable. Most of my utils are reusable fetch requests, but I also\n      have functions related to Google Authentication.\u003c/p\u003e\n\n    \u003ch1\u003eThe Backend\u003c/h1\u003e\n\n      \u003cp\u003eThe Backend uses Ruby on Rails and is hosted on Heroku. My favorite\n        aspect of the backend is that is sends nested associated data back to the\n        frontend (e.g., a user plus all of their associated video outlines)\n        using the \u003ca href=\"https://apidock.com/rails/Hash/to_json\"\u003eto_json\u003c/a\u003e\n        API. Using this system makes it incredibly easy to update the Redux store on\n        the frontend with scalpel-like precision.\u003c/p\u003e\n\n      \u003cp\u003eBecause authentication is largely handled on the client side, the backend for this\n        project is fairly straightforward.\u003c/p\u003e\n",
      "March 6, 2019",
      "https://images.unsplash.com/photo-1519419166318-4f5c601b8e6c?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=1267\u0026q=80",
      "2019-03-06 18:59:33.562229",
      "2019-03-06 18:59:33.562229"
    ],
    [
      13,
      "Pry Tips for Ruby Developers",
      "\u003cp\u003ePry is an amazing tool that can supercharge the software\n  development process. Pry is a REPL (Read, Evaluate, Print, and Loop)\n  like rpl.it and IRB. However, Pry has additional features that make\n  it especially helpful for writing and debugging code.\u003c/p\u003e\n\n\u003cp\u003eYou may already be familiar with the \u003ccode\u003ebinding.pry\u003c/code\u003e\n  method. If not, check out this \u003ca href=\"https://www.sitepoint.com/rubyists-time-pry-irb/\"\u003e\n  Tutorial\u003c/a\u003e by Benjamin Tan Wei Hoa.\u003c/p\u003e\n\n\u003cp\u003ePry's awesome features don't stop there though. You can also\n  navigate through files, lookup relevant methods and documentation,\n  and even trace the stack to hunt down a bug.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eGetting Started - Navigating State with \u003ccode\u003ecd\u003c/code\u003e,\n  \u003ccode\u003ewhereami\u003c/code\u003e, \u003ccode\u003els\u003c/code\u003e, and \u003ccode\u003eexit\u003c/code\u003e\n\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003ePry helps you learn how to use advanced features. Here are some\n  tips for accessing these features.\u003c/p\u003e\n\n\u003cp\u003eTo get started, it helps to know Pry’s \u003ccode\u003ecd\u003c/code\u003e method,\n  \u003ccode\u003ewhereami\u003c/code\u003e, and \u003ccode\u003els\u003c/code\u003e. Pry’s cd and ls methods\n  are similar to the terminal commands with the same name. They both\n  help users navigate around files and display directory contents.\n  Type “whereami” in a Pry session to check where you are.\u003c/p\u003e\n\n\u003cp\u003eOn to the code - open up a pry session and cd into Pry itself:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\n  [06:57:06] ~\n// ♥ Pry\n[1] pry(main)\u003e whereami\nAt the top level.\n[2] pry(main)\u003e cd Pry\n[3] pry(Pry):1\u003e whereami\nInside Pry.\n[4] pry(Pry):1\u003e \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAs you can see from the code above, you are now “inside Pry.” Pry\n  is a program like any other and contains numerous files and\n  Commands. Now,enter \u003ccode\u003els\u003c/code\u003e or \u003ccode\u003ehelp\u003c/code\u003e to get a\n  display of all sorts of Pry commands. Enter \u003ccode\u003eexit!\u003c/code\u003e to\n  back out of your current Pry session.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eIntrospection\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003ePry’s Introspection methods like \u003ccode\u003eshow-docs\u003c/code\u003e and\n  \u003ccode\u003eshow-code\u003c/code\u003e help you learn background information about\n  the program/class/method that you’re working with.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eShow Documentation - ?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe Pry command \u003ccode\u003eshow-docs\u003c/code\u003e (or \u003ccode\u003e?\u003c/code\u003e for\n  short) does exactly what it says: it shows you any relevant\n  documentation for the file you’re working with. This saves you from\n  having to hunt down the docs online. For example, typing ? in Pry\n  will bring up Pry’s docs:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\n  [07:11:51] ~\n// ♥ Pry\n[1] pry(main)\u003e cd Pry\n[2] pry(Pry):1\u003e ?\n\nFrom: /Users/edwardezekiel/.rvm/gems/ruby-2.3.3/gems/pry-0.11.3/lib/pry/pry_instance.rb @ line 2:\nClass name: Pry\nNumber of monkeypatches: 6. Use the `-a` option to display all available monkeypatches\nNumber of lines: 22\n\n -*- coding: utf-8 -*-\n#\n Pry is a powerful alternative to the standard IRB shell for Ruby. It\n features syntax highlighting, a flexible plugin architecture, runtime\n invocation and source and documentation browsing.\n \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003eShow Sources - $\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAs explained on on the Pry \u003ca href=\"https://github.com/pry/pry/wiki/Source-browsing\"\u003ewiki:\u003c/a\u003e\n  \u003cblockquote cite=\"https://github.com/pry/pry/wiki/Source-browsing\"\u003e\n    The code show-source command is capable of showing source code for\n    classes/modules and methods. Simply typing show-source method_name\n     will pull the source for the method and display it with syntax\n     highlighting. As a convenience, Pry looks up both instance\n     methods and class methods using this syntax, with priority given\n     to instance methods.\u003c/blockquote\u003e\n  \u003c/p\u003e\n\n\u003cp\u003eHere is an example:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\n  [07:13:00] ~\n  // ♥ Pry\n  [1] pry(main)\u003e cd Pry\n  [2] pry(Pry):1\u003e $\n\n  From: /Users/edwardezekiel/.rvm/gems/ruby-2.3.3/gems/pry-0.11.3/lib/pry/pry_instance.rb @ line 24:\n  Class name: Pry\n  Number of monkeypatches: 6. Use the `-a` option to display all available monkeypatches\n  Number of lines: 643\n\n  class Pry\n    attr_accessor :binding_stack\n    attr_accessor :custom_completions\n  ...\n  \u003c/code\u003e\u003c/pre\u003e\n  \n\u003cp\u003e\u003cstrong\u003ePry Stack Explorer\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003ePry even lets you explore the stack that you’re working with to\n  trace down tricky bugs. Stack trace methods include \u003ccode\u003eup\u003c/code\u003e,\n   \u003ccode\u003edown\u003c/code\u003e,\u003ccode\u003ecat --ex\u003c/code\u003e, and my personal favorite\n   \u003ccode\u003ewtf?\u003c/code\u003e This \u003ca href=\"https://www.sitepoint.com/rubyists-time-pry-irb/\"\u003earticle\u003c/a\u003e\n  by Benjamin Tan Wei Hoa provides some great stack trace examples.\u003c/p\u003e",
      "November 6, 2018",
      "https://images.unsplash.com/photo-1485936791407-c48cafed8213?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=1650\u0026q=80",
      "2019-01-25 21:57:54.369703",
      "2019-01-25 21:57:54.369703"
    ],
    [
      14,
      "Groupie - My First CLI",
      "\u003cp\u003eThis week I wrote my first Command Line Interface! It's called\n\"Groupie,\" and it helps people get tickets to see their favorite\nconcerts.\u003c/p\u003e\n\n\u003cp\u003eHere is the \u003ca href=\"https://github.com/edezekiel/groupie\"\u003eGithub link\u003c/a\u003e\n to the source code in case you are interested in taking a look.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eVideo Walkthrough\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's jump right in. \u003ca href=\"https://asciinema.org/a/7rcvL0AnlFtJsblXxn797XWco\"\u003eHere\u003c/a\u003e is a video walkthrough showing Groupie's\nbasic features: \u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eOrganizing the Run File Using Screens\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAs you may have noticed during the walkthrough, Groupie has several “menus” or “screens.” Different screens can be accessed at different times throughout the execution of the file. Each screen lets the user interact with some aspect of the CLI. For example, the “greeting screen” welcomes the user and provides basic instructions.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\ndef greet_screen\n    welcome_user\n    list_first_concert\n    list_first_band\n    session_screen\nend\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eThese are the different screens:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eGreeting;\u003c/li\u003e\n  \u003cli\u003eConcert list;\u003c/li\u003e\n  \u003cli\u003eIndividual concert information;\u003c/li\u003e\n  \u003cli\u003eTicketing;\u003c/li\u003e\n  \u003cli\u003eBand list;\u003c/li\u003e\n  \u003cli\u003eIndividual band information; and \u003c/li\u003e\n  \u003cli\u003eExit - allowing the user to exit at any time.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe trickiest part was getting the exit screen and the ticketing\nscreens to work. I wanted to user to be able to exit the program at\nany time and the buy tickets at several different points.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eFormatting - Pastel and Separators\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eI stylized Groupie using the \"pastel\" gem. I also created a method\ncalled \"separators\" that was responsible for inserting line breaks\nbetween each screen.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\ndef pastel\n    pastel = Pastel.new\n    pastel\n  end\ndef separator\n    puts \"                                                      \"\n    puts pastel.bright_magenta(\"==================================================\")\n    puts \"                                                      \"\n  end\n\u003c/code\u003e\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003eActiveRecord\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eI used the ActiveRecord gem to streamline several aspects of the program. This gem helps with creating and updating databases, creating associations between classes, and inheriting all kinds of built-in methods. For example, the “Bands” class is associated with the “Sessions” and “Concerts” classes:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\nclass Band \u003c ActiveRecord::Base\n  has_many :sessions\n  has_many :concerts, through: :sessions\nend\n\u003c/code\u003e\n\u003c/pre\u003e",
      "November 16, 2018",
      "https://cdn-images-1.medium.com/max/1600/1*FKY6UcbaTk7GvqmNkIBDsw.jpeg",
      "2019-01-25 22:07:41.209731",
      "2019-01-25 22:07:41.209731"
    ],
    [
      15,
      "Kaizoku - My First Ruby Gem",
      "\n\u003cp\u003eI had so much fun building Groupie that I decided to build another\n  CLI! This time I wanted to incorporate web scraping and turn my CLI\n  into a Ruby Gem. The result is Kaizoku.\u003c/p\u003e\n\n\u003cp\u003eKaizoku means \"pirate\" in Japanese. Kaizoku scours the internet for the\n  best Ruby gems.\u003c/p\u003e\n\n\u003cp\u003eHere is the \u003ca href=\"https://github.com/edezekiel/kaizoku\"\u003eGithub link\u003c/a\u003e\n to the source code.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://asciinema.org/a/KOVQnUkhHl41LQE7nCAWzehQ7\"\u003eVideo Walkthrough\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cscript id=\"asciicast-KOVQnUkhHl41LQE7nCAWzehQ7\" src=\"https://asciinema.org/a/KOVQnUkhHl41LQE7nCAWzehQ7.js\" async\u003e\u003c/script\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eInstalling Kaizoku\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you visit rubygems.org and search for Kaizoku, you will see my gem!\n  Here is a direct \u003ca href=\"https://rubygems.org/gems/kaizoku\"\u003elink\u003c/a\u003e.\n  You can also use the terminal to search for and install the gem by\n  typing \u003ccode\u003egem search kaizoku\u003c/code\u003e and \u003ccode\u003egem install kaizoku\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eMaking a Gem\u003c/strong\u003e\u003c/p\u003e\n  \u003cp\u003eThere are a ton of helpful guides on\n  \u003ca href=\"https://guides.rubygems.org/make-your-own-gem/\"\u003erubygems.org\u003c/a\u003e.\n  Their guides walk you through making your first gem and publishing it\n  to the site.\u003c/p\u003e\n\n  \u003cp\u003eThe trickiest part for me was pushing the gem to RubyGems.org.\n  I kept on getting an error that had something to do with a \"changelog.\"\n  After some quick googling, I realized that a changelog is simply a\n  .md file you add to the gem. The changelog.md file is where you\n  record notable changes to the project. My changelog's is based on\n  \u003ca href=\"https://keepachangelog.com/en/1.0.0/\"\u003eKeep a ChangeLog\u003c/a\u003e\n  template.\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eWeb Scraping with Nokogiri\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eNokogiri is Ruby gem that fetches and parses HTML documents (a web scraper).\nKaizoku uses Nokogiri to scrape ruby-toolbox.com. Here an example of the\ncode used to return a list of categorized gems:\n\n\u003cpre\u003e\u003ccode\u003e\n   def get_category\n     doc = Nokogiri::HTML(open(\"https://www.ruby-toolbox.com\"))\n     doc.css(\".category-group\").each do |category|\n       puts category.css(\"h3\").text\n     end\n     get_subcategory_screen\n   end\n\u003c/code\u003e\n\u003c/pre\u003e\n\n\u003c/p\u003e",
      "November 24,  2018",
      "https://cdn-images-1.medium.com/max/1600/1*1GPJInCBvnUXVJWuMz_GGA.jpeg",
      "2019-01-25 22:26:04.223166",
      "2019-01-25 22:26:04.223166"
    ],
    [
      16,
      "Ruby on Rails - Why form_for Uses Instance Variables",
      "\u003cp\u003eTLDR - we need an instance variable because \u003ccode\u003eform_for\u003c/code\u003e\nwont work without it.\u003c/p\u003e\n\n\u003cp\u003eThe past weeks have flown by. At Flatiron, we've moved from learning\n Ruby, to building Command Line Interfaces, to Sinatra, and now Rails.\u003c/p\u003e\n\n \u003cp\u003e\u003cstrong\u003eMy \"ah-ha\" Moment.\u003c/strong\u003e\u003c/p\u003e\n\n \u003cp\u003eThis article is about the my favorite \"ah-ha\" moment from this week:\n when I finally understood why we need to use an instance variable in\n  \u003ccode\u003eform_for\u003c/code\u003e. Below is an example using \u003ccode\u003eform_for\u003c/code\u003e\n  and \u003ccode\u003ecollection_select\u003c/code\u003e to build a new employee form:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\n#app/view/new.html.erb\n\n\u003c%= form_for @employee do | f | %\u003e\n  \u003c%= f.label :name %\u003e\n  \u003c%= f.text_field :name %\u003e\n  \u003c%= f.label :dog %\u003e\n  \u003c%= f.collection_select :dog_id, @dogs, :id, :name %\u003e\n  \u003c%= f.submit %\u003e\n\u003c% end %\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003cp\u003e\u003cdt\u003e\u003cstrong\u003eWhat's Going on in This Example?\u003c/strong\u003e\u003c/dt\u003e\u003c/p\u003e\n\n\u003cp\u003e\n  \u003cdd\u003e\u003ccode\u003eform_for\u003c/code\u003e: this is our view helper.\u003c/dd\u003e\u003cbr\u003e\n  \u003cdd\u003e\u003ccode\u003e@employee\u003c/code\u003e: see the section below.*\u003c/dd\u003e\u003cbr\u003e\n  \u003cdd\u003e\u003ccode\u003ef.\u003c/code\u003e: the form_for method yields a form builder object (the f variable).\u003c/dd\u003e\u003cbr\u003e\n  \u003cdd\u003e\u003ccode\u003ecollection_select\u003c/code\u003e: this is a pre-defined rails form-building method, called on f.\u003c/dd\u003e\u003cbr\u003e\n  \u003cdd\u003e\u003ccode\u003edog_id\u003c/code\u003e: save the user’s input (whatever it is) in the params[:id].\u003c/dd\u003e\u003cbr\u003e\n  \u003cdd\u003e\u003ccode\u003e@dogs\u003c/code\u003e: this kind of object will appear in the drop down menu.\u003c/dd\u003e\u003cbr\u003e\n  \u003cdd\u003e\u003ccode\u003e:id\u003c/code\u003e: save the id of whatever dog the user selects.\u003c/dd\u003e\u003cbr\u003e\n  \u003cdd\u003e\u003ccode\u003e:name\u003c/code\u003e: show dog names to the user in the drop down menu.\u003c/dd\u003e\n\u003c/p\u003e\n\n\n\u003cp\u003e\u003cstrong\u003e@employee\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIn our example above, the new form starts off empty.\nThe user then fills out the form and clicks submit.\u003c/p\u003e\n\n\u003cp\u003eTake a moment to think about what happens next in the lifecycle\nof the form. What data is being posted? Where did it come from?\n How is it being manipulated by our controller?\u003c/p\u003e\n\n \u003cp\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e\u003c/p\u003e\n\n \u003cp\u003eThe \u003ccode\u003eform_for\u003c/code\u003e tag isn't magic. It render the html\n    in the browser. Html \u003ccode\u003eform\u003c/code\u003e\n    Html form tags have action and method attributes that specify\n    what route to take next and what to do with data entered into the form.\u003c/p\u003e\n\n  \u003cp\u003eHere, form_for gathers the data entered in the form and stores it\n    in the instance variable @employee.\n    Then, rails transmits that data to the next route (edit) as params.\u003c/p\u003e\n\n    \u003cp\u003eBecause form_for gathers data in an instance variable, our params\n    can easily be destructed on the edit page and used to post a new\n    employee to the database.\u003c/p\u003e",
      "December 2, 2018",
      "https://cdn-images-1.medium.com/max/1600/1*wkFg3wfdmcWcp8Tszz53Ow.jpeg",
      "2019-01-25 22:27:48.784377",
      "2019-01-25 22:27:48.784377"
    ],
    [
      17,
      "❤️ Pair Programming",
      "\u003cp\u003eTime continues to fly at Flatiron bookcamp. We are\nwrapping up mod two today (Ruby on Rails) and presenting\nprojects.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTeamwork\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe worked on ruby on rails projects in teams. My partner was Kaeland\nand I am so glad that we got paired together!\u003c/p\u003e\n\n\u003cp\u003eWe finally got to flex our Ruby on Rails knowledge. More importantly,\nwe had blast working together. Here's the link our app: \u003ca href=\"https://infinite-anchorage-40950.herokuapp.com/\" target=\"_blank\"\u003eDailyGifs\u003c/a\u003e.\n\u003c/p\u003e\n\n\u003cimg src=\"https://media.giphy.com/media/a438FURInfacU/giphy.gif\"\u003e\n\n\u003cp\u003eThere were several points during project week where things could have\ngone sideways. There were some early issues with our domain model,\ndifficult password authentication concepts, and a fair number of styling\nbugs.\u003c/p\u003e\n\n\u003cp\u003eHowever, Kaeland's upbeat attitude and our teamwork helped us stay in\n\"coding flow\" and keep the ball rolling. I am so proud of our final\nproduct.\u003c/p\u003e\n\n\u003cp\u003eIf you are just starting out with learning to code, look for\n  opportunities to work on a team. It's been one of the highlights\n  of the bootcamp so far.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOur Web App - DailyGif\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you've made it this far in this blog post, you may be wondering\nwhat we actually built! Here's a quick rundown:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eThe web app is called DailyGif.\u003c/li\u003e\n  \u003cli\u003eWe wanted to make something that was a cross between\n    \u003ca href=\"https://iwastesomuchtime.com/\"\u003eiwastesomuchtime.com\u003c/a\u003e\n    and \u003ca href=\"https://giphy.com/\"\u003eGIPHY\u003c/a\u003e. In other words, a fun\n    website for people who love gifs!\n  \u003c/li\u003e\n  \u003cli\u003eDailyGif users can signup, login, view a feed of recently created gifs,\n  and upload gifs.\u003c/li\u003e\n  \u003cli\u003eWe picked Semantic UI for our CSS framework. Even with a framework,\n   it took about a day and a half to work out all the styling kinks.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eThank You Flatiron!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eBefore I wrap up this post, I want to thank all of the instructors\n and staff at Flatiron in Atlanta. I really appreciate the awesome culture,\n technical support, and guidance. Thank you!\u003c/p\u003e",
      "December 7, 2018",
      "https://cdn-images-1.medium.com/max/1600/1*oWwWfVhYXnQ04muJtnAi6A.jpeg",
      "2019-01-25 22:28:37.218497",
      "2019-01-25 22:28:37.218497"
    ],
    [
      18,
      "Where is the DOM?",
      "\u003cp\u003e \u003cstrong\u003eTLDR:\u003c/strong\u003e the browser parses an html file, creates the DOM, and stores\n  the DOM in memory.\u003c/p\u003e\n\n\u003cp\u003eMy blog post this week deals with the Document Object Model (DOM).\n  If you are not familiar with this concept, Mozilla has a great explainer\n  \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\"\u003ehere\u003c/a\u003e.\n\u003c/p\u003e\n\n\u003cp\u003eAt Flatiron, we've discussed what the DOM is, why it's important, and how to access\n it. However, we haven't addressed where the DOM is stored, or how it gets there.\n For some reason I found this topic especially interesting this week.\n This blog post is about my journey exploring this topic.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDown the Rabbit Hole - \u003ccode\u003ewindow\u003c/code\u003e and \u003ccode\u003edocument\u003c/code\u003e \u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e I recently watched the \"JavaScript: Understanding the Weird Parts\"\n\u003ca href=\"https://www.youtube.com/watch?v=Bv_5Zv5c-Ts\"\u003evideo\u003c/a\u003e by Tony Alicia.\nIf you skip to 29:00, he creates and opens an empty \"app.js\" file\nin the browser. The app.js file is completely empty.\u003c/p\u003e\n\n\u003cp\u003eAfter opening the browser, Tony launches chrome's dev console and\n  enters the word \u003ccode\u003ewindow\u003c/code\u003e. Somehow, the console returned a\n  \u003ccode\u003ewindow\u003c/code\u003e property that contained hundreds of key/value pairs.\n  Entering \u003ccode\u003edocument\u003c/code\u003e in the console for a blank site similarly yields\n  some kind of pre-defined property.\n\u003c/p\u003e\n\n\u003cp\u003eAccording to \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window\"\u003eMDN\u003c/a\u003e,\n  \"the \u003ccode\u003ewindow\u003c/code\u003e interface represents a window containing a\n  DOM document; the \u003ccode\u003edocument\u003c/code\u003e property points to the DOM\n  document \u003cstrong\u003eloaded\u003c/strong\u003e in that window.\"\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLoaded From Where?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eAs MDN explains above, the browser \"loads\" the \u003ccode\u003edocument\u003c/code\u003e\n  into the window. But where is the DOM? How does \u003ccode\u003edocument\u003c/code\u003e\n  know where to look?\u003c/p\u003e\n\n\u003cp\u003eAfter some googling I landed on this answer from \u003ca href=\"https://reactkungfu.com/2015/10/the-difference-between-virtual-dom-and-dom/\"\u003eReact Kung Fu\u003c/a\u003e:\n  \u003cblockquote cite=\"https://reactkungfu.com/2015/10/the-difference-between-virtual-dom-and-dom/\"\u003e\n    \"So, while HTML is a text, the DOM is an \u003cstrong\u003ein-memory representation\u003c/strong\u003e\n    of this text.\"\n  \u003c/blockquote\u003e\n\u003c/p\u003e\n\n\u003cp\u003eIn other words, the browser stores the DOM in RAM. My next question\n  was how?\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe Rendering Engine - How HTML Gets Transformed Into the DOM\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://link.medium.com/V8nfg6ioBS\"\u003eHere's\u003c/a\u003e an excerpt from\n  a post on medium that answers how the DOM gets loaded into memory:\n  \u003cblockquote cite=\"https://link.medium.com/V8nfg6ioBS\"\u003e\n    The browser's rendering engine receives the contents of the requested\n    document from the networking layer. The first step of the rendering\n    engine is parsing the HTML document and converting the parsed\n    elements to actual DOM nodes in a DOM tree.\n  \u003c/blockquote\u003e\n  \u003c/p\u003e\n\n\u003cp\u003eThis process can be broken down further into \"conversion,\"\n \"tokenizing\", \"lexing\", and DOM \"construction.\" See \u003ca href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model\"\u003ethis\u003c/a\u003e\n article by Google Web for more info.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOne Last Experiment With JavaScript Runtime Environments\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eGoogle Chrome's Javascript Engine is called \u003ca href=\"https://v8.dev/\"\u003eV8\u003c/a\u003e.\nV8 is also used a JavaScript runtime environment called\n\u003ca href=\"https://nodejs.org/en/\"\u003eNode.js\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eUnlike Chrome, Node.js does not run in the browser. It didn't make\nsense to me to have a DOM without a browser, but I wanted to confirm.\nI started Node.js by entering \u003ccode\u003enode\u003c/code\u003e in my terminal, and\nthen I entered \u003ccode\u003edocument\u003c/code\u003e. As I expected, the terminal returned\n\u003ccode\u003eReferenceError: document is not defined\u003c/code\u003e.\n\n\u003cp\u003eI hope you enjoyed reading this post!\u003c/p\u003e",
      "December 13, 2018",
      "https://cdn-images-1.medium.com/max/1600/1*beRYwjZEts5OBGUM1zEHbw.jpeg",
      "2019-01-25 22:29:28.611099",
      "2019-01-25 22:29:28.611099"
    ],
    [
      19,
      "fetch() - A Line-By-Line Walkthrough",
      "\u003cp\u003eLearning the \u003ccode\u003efetch\u003c/code\u003e API can be a struggle. It certainly\n  was for me. Even when I got it working I had trouble explaining why\n  it worked.\u003c/p\u003e\n\n\u003c!-- \u003ciframe src=\"https://giphy.com/embed/MEAErCpMjFhn2\" width=\"480\" height=\"450\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen\u003e\u003c/iframe\u003e\u003cp\u003e\u003ca href=\"https://giphy.com/gifs/dog-plays-MEAErCpMjFhn2\"\u003evia GIPHY\u003c/a\u003e\u003c/p\u003e --\u003e\n\n\u003ciframe src=\"https://giphy.com/embed/2Faz1ANKPPUY4XhT2\" width=\"480\" height=\"480\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen\u003e\u003c/iframe\u003e\n\n\u003cp\u003eThis article walks through each line of a simple fetch example in an\n  attempt to demystify the process. I pulled example code from a\n  \u003ca href=\"https://scotch.io/tutorials/how-to-use-the-javascript-fetch-api-to-get-data\"\u003etutorial\u003c/a\u003e\n  on scotch.io. I loved this tutorial, and I definitely recommend working through it!\n\u003c/p\u003e\n\n\u003cp\u003e \u003cstrong\u003eLet's get started.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eHere is an example of a simple fetch request:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fetch(url)\n  .then((resp) =\u003e resp.json()) // Transform the data into json\n  .then(function(data) {\n    // Create and append the li's to the ul\n    })\n  })\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAs discussed in the scotch.io tutorial, this example fetches data\n  about \"authors\" from an API, and calls a function that adds those\n  authors to the page.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eLine 1: fetch(url)\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe first line initiates a GET request (by default) to a url.\nThis generates \u003cstrong\u003epromise one\u003c/strong\u003e, and returns that promise.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eLine 2: .then((resp) =\u003e resp.json())\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe second line is a callback. It runs after promise one is complete.\nThis line should get the value from the fetch (a response). By default, the\nresponse is text.\u003c/p\u003e\n\n\u003cp\u003eWe want to convert the text to json, so we accept the response as\n  an argument to another function and call .json() method to parse it.\u003c/p\u003e\n\n\u003cp\u003eParsing the text in our example to json happens almost instantaneously.\nHowever, this process could take several seconds if there is a lot of data to parse.\u003c/p\u003e\n\n\u003cp\u003eJust like we don't want to hold up the browser waiting on a server to\nreturn a response, we don't want to hold up the browser waiting on\nparsing text into json.\u003c/p\u003e\n\n\u003cp\u003eTherefore, this line returns \u003cstrong\u003epromise two\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eLine 3: .then(function(data) {//someFunction})})\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eBy line three the json parsing is complete. We finally have a real\n JavaScript object with data that we can work with. Now we can pass that\n data into another function and process it in some way. \u003c/p\u003e\n\n\u003cp\u003e \u003cstrong\u003eFinal Thoughts\u003c/strong\u003e \u003c/p\u003e\n\n\u003cp\u003eRemember that any function that returns a promise, has to throw something on the callback\nqueue to process the result when it's ready.\u003c/p\u003e",
      "December 21, 2018",
      "https://cdn-images-1.medium.com/max/1600/1*TCusjWxu_6fafgRdJq9dfQ.jpeg",
      "2019-01-25 22:30:55.999283",
      "2019-01-25 22:30:55.999283"
    ],
    [
      20,
      "Mod 3 Flatiron Project - Coffee Break",
      "\u003cp\u003eJanuary marks the beginning of 2019 and the end of mod 3. This mod has been\nthe most challenging yet. As I discussed in my last blog post, it\ntook me a while to wrap my head around several mod 3 concepts.\u003c/p\u003e\n\n\u003cp\u003eAfter weeks of debugging, practicing, and coding, I have finally\ncompleted my mod 3 project! Here are links to the \u003ca href=\"https://github.com/edezekiel/frontend-coffee-bulma\"\u003efrontend\u003c/a\u003e\nand \u003ca href=\"https://github.com/edezekiel/backend-coffee-bulma\"\u003ebackend\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis post is about my key takeaways from the past few weeks.\u003c/p\u003e\n\n\u003cstrong\u003e\u003cp\u003eKnow When To Take A Step Back\u003c/p\u003e\u003c/strong\u003e\n\n\u003cp\u003eGoing to a coding bootcamp can feel like a cramming session.\nLabs stack up, project deadlines get closer, and study sessions run late.\nEven so, it is incredibly important to take breaks.\u003c/p\u003e\n\n\u003cp\u003eThis project really tested my mental endurance, which is why\ntaking breaks was critical. It helped that Christmas and New Year's\nfell in the middle of the mod. They helped/forced me to take a step\nback from the code. After a few days of rest the concepts started\ncoming together.\u003c/p\u003e\n\n\u003cstrong\u003e\u003cp\u003eThoughts on External APIs (Use Faker Instead)\u003c/p\u003e\u003c/strong\u003e\n\n\u003cp\u003eAt the beginning of my project I considered using an external API\nlike yelp fusion. Their API is really easy to use and the documentation\nis great.\u003c/p\u003e\n\n\u003cp\u003eNotably, you can make yelp API requests without having to\nset up advanced OAuth2 tokens. OAuth2 tokens are important, but beyond\nthe scope of my project.\u003c/p\u003e\n\n\u003cp\u003eI got as far as seeding my rails database with data from yelp API.\nEventually, though, I used the Ruby gem \"Faker\" to create my seed data.\u003c/p\u003e\n\n\u003cstrong\u003e\u003cp\u003eFaker\u003c/p\u003e\u003c/strong\u003e\n\n\u003cp\u003eFaker is amazing. It lets you build seed data amazingly fast with\njust a few lines of code. You don't have to learn API-specific rules,\nset up OAuth tokens, or manually create object instances.\u003c/p\u003e\n\n\u003cp\u003eHere is the entirety of my db.seed file for my mod 3 project:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\nBlend.destroy_all\n\nNote.destroy_all\n\n20.times do\n  b = Blend.create(\n      name: Faker::Coffee.blend_name,\n      origin: Faker::Coffee.origin,\n      variety: Faker::Coffee.variety\n  )\n  Note.create(blend_id: b.id, body: Faker::Coffee.notes)\nend\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWith this seed file, I had enough data to test my rails associations\nand render my website.\u003c/p\u003e\n\n\u003cstrong\u003e\u003cp\u003eBulma\u003c/p\u003e\u003c/strong\u003e\n\n\u003cp\u003eI decided to switch up my CSS framework for this project. Bulma is\nmodern and based around the CSS\nFlexbox feature. My feelings about Bulma are mixed.\u003c/p\u003e\n\n\u003cp\u003ePros:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003eIt is incredibly easy to get set up. Just paste \u003ca href=\"https://gist.github.com/edezekiel/41e3fc3e0bf229043d192d4260d94898\"\u003ethis\u003c/a\u003e header.\u003c/li\u003e\n  \u003cli\u003eThe standard configurations make it easy to set up a hero\n  banner, navBar, footer, etc.\u003c/li\u003e\n  \u003cli\u003eThe features look good.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eCons\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003eThe documentation is a little bit sparse;\u003c/li\u003e\n  \u003cli\u003eIt was surprisingly difficult to implement a basic flex wrap\n  system for \"cards\" or \"tiles.\" At a few points I was tempted\n  to ditch the framework and just code the CSS using Flexbox.\u003c/li\u003e\n  \u003cli\u003eSetting up event handlers on \"form\" buttons was a nightmare.\n  I didn't have problem getting the event listeners to work before\n  adding Bulma, but afterwards it took hours of debugging.\u003c/li\u003e\n\u003c/ol\u003e",
      "January 4, 2019",
      "https://cdn-images-1.medium.com/max/1600/1*cE88UGiWpL3qR9kclGm-WA.jpeg",
      "2019-01-25 22:32:17.058062",
      "2019-01-25 22:32:17.058062"
    ],
    [
      29,
      "GOT Game?",
      "\n      \u003cp\u003eI am very happy to introduce my next project:\n      \u003ca href=\"https://got-game.netlify.com/\"\u003eGOT Game\u003c/a\u003e.\n      I've wanted to build a \"serverless\" site for a while now,\n      and this project was the perfect opportunity to give it a shot.\n      Keep reading to find out more about how and why I put the site together.\n      \u003c/p\u003e\n\n      \u003cp\u003eGOT Game really only needed a small repository to store information\n      about the show's characters and some way of keeping track of the leaderboard. Thus,\n      I thought it would be a good candidate for \"serverless\" architecture.\u003c/p\u003e\n\n    \u003ch1\u003eGOT Game\u003c/h1\u003e\n\n      \u003cp\u003eThis website is for anyone who wants to test their\n      Game of Thrones trivia knowledge! With the GOT\n      finale just around the corner, this project will help\n      you remember who has managed to survive to the eighth season.\n      \u003c/p\u003e\n\n      \u003cp\u003eGOT Game began as a Mod4 project at Flatiron with\n        my classmate Kwam Amissah. Shout out to Kwam for being\n        an awesome partner and being my teammate on the\n        previous version of this web app!\u003cp\u003e\n\n      \u003cp\u003eI've changed around several features on the frontend since\n        then, and switched the backend from Rails to the\n        serverless architecture.\n      \u003c/p\u003e\n\n    \u003ch1\u003eServerless Architecture - Firestore\u003c/h1\u003e\n\n      \u003cp\u003eThis web app does not have a traditional back end:\n      I didn't program a Rails API to run on a server somewhere.\u003c/p\u003e\n\n      \u003cp\u003eInstead, data is saved on Google Firebase's\n        \u003ca href=\"https://firebase.google.com/docs/firestore/\"\u003eFirestore\u003c/a\u003e server.\n      I think the term serverless is a misnomer. My site's user data\n      and assets have to live on a server somewhere. In that sense,\n      Google's Firestore is similar to the Heroku platform.\n      \u003c/p\u003e\n\n      \u003cp\u003eBoth Firestore and Heroku let you save data on a cloud\n      server. Like traditional full-stack apps hosted on Heroku, coded\n      the frontend/client using React.\u003cp\u003e\n\n      \u003cp\u003eThe difference is that Firestore provides a \"flexible, scalable\n        NoSQL cloud database to store and sync data for client- and\n        server-side development,\" without needing to write a Rails API.\u003c/p\u003e\n\n\n    \u003ch1\u003eWhy Not Amazon Web Services?\u003c/h1\u003e\n\n      \u003cp\u003eI considered using AWS because AWS lets you pick between\n         NoSQL and SQL database structures. Firestore only provides\n        NoSQL (non-relational) databases.\u003c/p\u003e\n\n      \u003cp\u003eFor this project I didn't really need a relational database.\n      Additionally, AWS is only free for a limited period of time while\n      Firestore stays free forever.\u003c/p\u003e",
      "March 14, 2019",
      "https://images.unsplash.com/photo-1515255384510-23e8b6a6ca3c?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=889\u0026q=80%20889w,%20https://images.unsplash.com/photo-1515255384510-23e8b6a6ca3c?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=1189\u0026q=80%201189w",
      "2019-03-14 11:06:42.647248",
      "2019-03-14 11:06:42.647248"
    ],
    [
      30,
      "Smart City Hackathon",
      "\n    \u003ch1\u003eAttending a Hackathon\u003c/h1\u003e\n\n    \u003cp\u003eI participated in my first Hackathon last weekend!\n      It was Memphis' \"Smart City\" Hackathon. I coded with a group of\n      blockchain developers from web3devs on project we called \"BlockSaver.\" Here is the\n      \u003ca href=\"https://github.com/edezekiel/blocksaver\"\u003eGithub\u003c/a\u003e link.\n    \u003c/p\u003e\n\n    \u003cp\u003eThe Hackathon theme was transportation and mobility, with a special\n    focus on pedestrian safety. There are dozens of pedestrian deaths each year\n    in Memphis.\u003c/p\u003e\n\n    \u003cp\u003eI was blown away by what the groups came up with. One team designed a\n    video surveillance system so that buses can \"see\" and record potholes\n    in the road. Another group developed a system to to light up crosswalks\n    automatically whenever a person walks by.\u003c/p\u003e\n\n    \u003ch1\u003eBlockSaver\u003c/h1\u003e\n\n    \u003cp\u003eMy team created a web app called BlockSaver, which lets users\n    geotag and report pedestrain safety issues like broken sidewalks.\n    I built a substantial part of the frontend using React and basic CSS.\n    That's right, we did not use a CSS framework for the app. I thought\n    this would be a great opportunity to improve some of my basic CSS skills.\n    I wound up using Flexbox a lot and I really enjoyed the experience.\u003c/p\u003e\n\n    \u003ch1\u003eBlockChain\u003c/h1\u003e\n\n    \u003cp\u003eAs I mentioned above, I worked on the project with a group of blockchain\n    developers. So, of course our app had some awesome blockchain integration.\n    They created an ERC20 smart contract on the Ethereum network that is tied\n    to our app. Whenever someone submits a pedestrian safety report, the\n    smart contract creates a transaction on the blockchain system, and gives\n    the user a token.\u003c/p\u003e\n",
      "March 22, 2019",
      "https://images.unsplash.com/photo-1533788179956-82e8a027c962?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=1650\u0026q=80",
      "2019-03-22 17:29:31.3303",
      "2019-03-22 17:29:31.3303"
    ],
    [
      24,
      "Using Javascript's \"this\" Keyword in React",
      "\u003cp\u003eIn this post, I break down the keyword \u003ccode\u003ethis\u003c/code\u003e and\nprovide a quick example using React.\u003c/p\u003e\n\n\u003cstrong\u003e\u003cp\u003eWhy Should I Care About \u003ccode\u003ethis\u003c/code\u003e in React?\u003c/p\u003e\u003c/strong\u003e\n\n\u003cp\u003eMy Flatiron cohort is finally getting to use React js! React has a ton\nof features that simplify writing front-end Javascript code.\u003c/p\u003e\n\n\u003cp\u003eHowever, it's even more important to understand how the keyword\n\u003ccode\u003ethis\u003c/code\u003e works. Whether you're defining a method, setting\nstate, lifting state up, referring to props, etc., the value of\n\u003ccode\u003ethis\u003c/code\u003e can make or break your app.\u003c/p\u003e\n\n\u003cstrong\u003e\u003cp\u003e\u003ccode\u003ethis\u003c/code\u003e Scope in the Browser (Global)\u003c/p\u003e\u003c/strong\u003e\n\n\u003cp\u003eIf you type \u003ccode\u003ethis\u003c/code\u003e in chrome's dev console, the console returns:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eWindow {postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ,\n  parent: Window, …}\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eCheck out my post \u003ca href=\"http://edezekiel.com/blogs/12_13_2018.html\"\u003e\n  Where is the DOM?\u003c/a\u003e if you are interested in learning more about\n  the \u003ccode\u003ewindow\u003c/code\u003e object.\u003c/p\u003e\n\n\u003cstrong\u003e\u003cp\u003e\u003ccode\u003ethis\u003c/code\u003e Scope Inside a New Object\u003c/p\u003e\u003c/strong\u003e\n\n\u003cp\u003eLet's create a simple object and set some properties:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\n// create an empty object using the ES6 object initializer\nlet myObject = {}\n\nmyObject\n  \u003e\u003e {}\n\n// defining \"a\" and \"b\" properties and setting their values using dot notation\nmyObject.a = 100\nmyObject.b = 50 \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNext, we can define a method called \"mySum\" on myObject. When mySum\ncalls on \u003ccode\u003ethis\u003c/code\u003e, \u003ccode\u003ethis\u003c/code\u003e refers to myObject:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\n// example demonstrating the scope of this inside an object\nmyObject.mySum = function() {return this.a + this.b}\n\nmyObject.mySum()\n  \u003e\u003e150\n\n// another example\nmyObject.newFunction = function() {console.log(this)}\n\nmyObject.newFunction()\n  \u003e\u003e {a: 100, b: 50, mySum: ƒ, newFunction: ƒ}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cstrong\u003e\u003cp\u003eArrow Functions: Explicitly Setting \u003ccode\u003ethis\u003c/code\u003e\u003c/p\u003e\u003c/strong\u003e\n\n\u003cp\u003eAs noted in Trey's article, there are several ways to explicitly set\n\u003ccode\u003ethis\u003c/code\u003e on a function. One way is to use the arrow\nfunction introduced in ES6.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://hacks.mozilla.org/2015/06/es6-in-depth-arrow-functions/\"\u003eHere\u003c/a\u003e\nis a great article by Jason Orendorff comparing the difference in behavior between\n \u003ccode\u003ethis\u003c/code\u003e in ordinary functions and arrow functions. \u003c/p\u003e\n\n \u003cp\u003eJason explains it best:\n  \u003cblockquote\n  cite=\"https://hacks.mozilla.org/2015/06/es6-in-depth-arrow-functions/\"\u003e\n  \u003cp\u003eArrow functions do not have their own \u003ccode\u003ethis\u003c/code\u003e value. The value of\n    \u003ccode\u003ethis\u003c/code\u003e inside an arrow function is always inherited from the enclosing\n    scope.\u003c/p\u003e\n  \u003c/blockquote\u003e\n\u003c/p\u003e\n\n\u003cstrong\u003e\u003cp\u003eRefactoring a React js Example Using Arrow Functions\u003c/p\u003e\u003c/strong\u003e\n\n\u003cp\u003eFacebook provides great \u003ca href=\"https://reactjs.org/docs/getting-started.html\"\u003edocumentation\u003c/a\u003e\n  on React JS. One of the \"Main Concepts\" in the getting started guide\n  explaines how to \"lift state up.\"\u003c/p\u003e\n\n\u003cp\u003eIf you are not familiar with this concept, you should\nwork through their \u003ca href=\"https://reactjs.org/docs/lifting-state-up.html\"\u003eLifting State Up\u003c/a\u003e\nguide before continuing with this article.\u003c/p\u003e\n\n\u003cp\u003eInterestingly, in FB's example they use \u003ccode\u003ebind\u003c/code\u003e instead\n  of arrow functions to set the value of \u003ccode\u003ethis\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\n// using .bind\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = {temperature: '', scale: 'c'};\n  }\n\n  handleCelsiusChange(temperature) {\n    this.setState({scale: 'c', temperature});\n  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({scale: 'f', temperature});\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eFB's example can easily be refactored using the arrow function\n  instead of bind:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\n// using the arrow function \n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {temperature: '', scale: 'c'};\n  }\n  \n  handleCelsiusChange = (temperature) =\u003e {this.setState({scale: 'c', temperature});}\n\n  handleFahrenheitChange = (temperature) =\u003e {this.setState({scale: 'f', temperature});}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ca href=\"https://codepen.io/edezekiel/pen/GPaOMr\"\u003eHere\u003c/a\u003e is the codepen\n  to my version using the arrow function.\u003c/p\u003e\n\n\u003cstrong\u003e\u003cp\u003eWeird Highlighting Error with Refactored CodePen Example\u003c/p\u003e\u003c/strong\u003e\n\n\u003cp\u003eIf you open my codepen you may notice a weird highlighting issue.\nThe handleCelciusChange and handleFarenheitChange syntax highlighting\nis off. Codepen's syntax highlighter thinks the code is broken, but the\nJS(Babel) tool is still able to render the Calculator component.\u003c/p\u003e\n\n\u003cstrong\u003e\u003cp\u003eCredits\u003c/p\u003e\u003c/strong\u003e\n\n\u003cp\u003eMany thanks to Trey Alexander Davis for his article\n\u003ca href=\"https://medium.com/byte-sized-react/what-is-this-in-react-25c62c31480\"\u003e\n  \"What is 'this' in React?\"\u003c/a\u003e\n\u003c/p\u003e",
      "January 17, 2019",
      "https://images.unsplash.com/photo-1507652955-f3dcef5a3be5?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=1650\u0026q=80",
      "2019-01-26 19:34:21.633828",
      "2019-01-26 19:34:21.633828"
    ],
    [
      31,
      "CSS-Only Responsive Navigation Menu",
      "  \u003cp\u003eThis week I focused on my CSS skills by building a responsive navigation\n      bar without using Javascript.\n    \u003c/p\u003e\n\n    \u003cp\u003eI'm really happy with how this project turned out!\n      Here is a link to the \u003ca href=\"https://codepen.io/edezekiel/pen/drrQzP?editors=1100\"\u003ecodepen\u003c/a\u003e.\n      It's obviously not a full-fledged website, but I've wanted to build this kind of navbar ever since\n    I started this blog.\u003c/p\u003e\n\n    \u003cp\u003e\n      The full desktop view displays a standard navbar links to various pages. If you\n      view the site on a mobile device or if you shrink your browser window, you'll\n      see that the navbar shrinks to the \"hamburger\" button style.\n    \u003c/p\u003e\n\n    \u003ch1\u003eWhy This Project? Why No Javascript?\u003c/h1\u003e\n\n      \u003cp\u003eAt Flatiron, we mostly used CSS frameworks like semantic UI\n      or Bulma for navigation menu bars. I wanted to see what it would be like to\n      implement a responsive navbar from scratch.\u003c/p\u003e\n\n      \u003cp\u003eI decided not to use Javascript as a bit of a challenge. I just thought\n       it would be fun to see what kind of advanced features I could build with\n      CSS and HTML.\u003c/p\u003e\n\n    \u003ch1\u003eFlexbox\u003c/h1\u003e\n\n      \u003cp\u003eFlexbox does a lot of the heavy lifting for this project. If you haven't\n      used Flexbox before, or just need a refresher, I definitely recommend\n      this \u003ca href=\"https://flexboxfroggy.com/\"\u003egame\u003c/a\u003e and this\n      \u003ca href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\"\u003esite\u003c/a\u003e\n      to get started.\u003c/p\u003e\n\n    \u003ch1\u003eHow does the \"Hamburger\" Menu Work Without JS?\u003c/h1\u003e\n\n      \u003cp\u003eThe trick here has a few parts. First, add checkbox and label tags to the HTML.\n        For the label I used the HTML unicode #9776. This is technically\n        called the \"Trigram for Heavan\" glyph, but people generally recognize it\n        as the \"hamburger icon.\"\n       \u003c/p\u003e\n\n      \u003cp\u003eNext, set the display for these elements to \"none\" in the stylesheet.\n      After that, create a CSS media query for smaller screens, e.g.,\n      when the client is a mobile phone. On smaller screens the media query\n      hides the navlinks and reveals the hamburger icon.\u003c/p\u003e\n\n      \u003cp\u003eClicking the hamburger icon toggles the navlinks back to flexbox display.\n      However, the nav's position is fixed, and the navlinks flex-direction is set to\n      \"column.\" Taken together, this results in a hamburger menu that pops out\n      navigation links.\u003c/p\u003e",
      "March 30, 2019",
      "https://images.unsplash.com/photo-1457460866886-40ef8d4b42a0?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=1650\u0026q=80",
      "2019-03-30 23:15:01.962704",
      "2019-03-30 23:15:01.962704"
    ],
    [
      32,
      "Total Recall",
      "  \u003ch1\u003eBlockchain in Supply Chain\u003c/h1\u003e\n\n      \u003cp\u003eEarlier this week I went to a meetup called \"Blockchain in Supply\n        Chain with IBM.\" The presenter was Kurt Wedgwood, IBM North America\n        Blockchain Leader.\u003c/p\u003e\n\n      \u003cp\u003eThe event was hosted at the University of Memphis' UMRF Research Park\n        (a.k.a. \"Communitech\"). I've already been to a few events at Communitech\n        and it is a great space!\u003c/p\u003e\n\n    \u003ch1\u003eIntroductions\u003c/h1\u003e\n\n      \u003cp\u003eThe presentation was split up into three parts. First, Kurt discussed\n      blockchain use cases in the supply chain industry. For example, IBM\n      has the \u003ca href=\"https://www.ibm.com/blockchain/solutions/food-trust\"\u003eFood Trust\u003c/a\u003e\n      initiative. Food Trust uses the blockchain to track the location and status\n      and location of food producs.\u003c/p\u003e\n\n    \u003ch1\u003eTotal Recall\u003c/h1\u003e\n      \u003cp\u003eSecond, we broke out into groups to brainstorm other ways blockchain\n      could be used in the supply chain issues. I worked with a group focused\n      on the pharmaceutical industry.\u003c/p\u003e\n\n    \u003cp\u003eWe specifically explored how blockchain\n      could be used to improve pharmaceutical recalls. We envisioned a permissioned blockchain\n      that would streamline communication between consumers and manufacturers when a recall takes place.\u003c/p\u003e\n\n    \u003ch1\u003eWrapping Up\u003c/h1\u003e\n      \u003cp\u003eFinally, we shared our ideas and provided feedback to each group.\n      I really enjoyed hearing about all of the different ideas. They ranged from\n      using the blockchain to transact advertising bounties, to creating a system for ensuring\n      coffee quality.\u003c/p\u003e",
      "April 6, 2019",
      "https://images.unsplash.com/photo-1465844880937-7c02addc633b?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=1650\u0026q=80",
      "2019-04-06 15:26:07.146637",
      "2019-04-06 15:26:07.146637"
    ],
    [
      27,
      "Introducing My Upgraded Blog!",
      "    \u003cp\u003e\n      I am happy to introduce the new and improved\n      \u003ca href=\"https://www.edezekiel.com/\"\u003eedezekiel.com\u003c/a\u003e! I had so much fun creating this site and I hope you enjoy it.\n    \u003c/p\u003e\n\n    \u003cp\u003eAs of this article, I only have ten days left before graduating from Flatiron. \n      I can't believe the program is almost over. After graduation I'll begin looking \n      for a web development position near my family in Memphis, TN.\u003c/p\u003e\n\n    \u003cp\u003ePlease read on if you are interested in learning more how my site works under the hood.\u003c/p\u003e\n    \n    \u003cdiv className=\"ui header\"\u003eThe Stack\u003c/div\u003e\n\n    \u003cp\u003e\n      I built the backend of my new blog using Rails, and the frontend using\n      React. Here are links to the\n      \u003ca href=\"https://github.com/edezekiel/frontend-react-rails-blog\"\u003e\n        frontend\u003c/a\n      \u003e\n      and\n      \u003ca href=\"https://github.com/edezekiel/backend-react-rails-blog\"\n        \u003ebackend\u003c/a\n      \u003e on Github.\n    \u003c/p\u003e\n    \n    \u003cdiv className=\"ui header\"\u003eDeployment\u003c/div\u003e\n\n    \u003cp\u003e\n      Selecting the right place to host my frontend and backend took a lot of\n      research. I eventually landed on Netlify (frontend) and Heroku (backend).\n      Both of these services streamline deployment for the kind of web app I\n      wanted to build.\n    \u003c/p\u003e\n\n    \u003cdiv className=\"ui header\"\u003eLogin and Authentication\u003c/div\u003e\n\n    \u003cp\u003e\n      Although it's not publicly displayed, my site does feature a log in\n      system. This system lets me create and save new articles from the browser.\n      (More on the article publishing feature in a moment). Authentication is\n      token-based, using JSON Web Tokens to encrypt confidential information.\n    \u003c/p\u003e\n\n    \u003cdiv className=\"ui header\"\u003eCreating New Articles\u003c/div\u003e\n\n    \u003cp\u003e\n      My favorite feature in the new site is that I can create and save new\n      articles from the website itself. After logging in, I navigate to a New\n      Article tab and type away in a textarea.\n    \u003c/p\u003e\n\n    \u003cp\u003e\n      Text is saved in local state using React, and immediately rendered to an\n      \"Article Preview\" component. I can even draft inline styling in HTML/CSS as I write\n      the article. This is possible because of the\n      \u003ca href=\"https://www.npmjs.com/package/html-react-parser\"\n        \u003ehtml-react-parser\u003c/a\n      \u003e package on npm. The parser converts HTML strings into React elements. Therefore, \n      I can save an \"article\" on my backend/in state as a simple Javascript string.\n      The string can include html tags.\n      Then, the Parser converts the simple string into a React Component.\n    \u003c/p\u003e\n  \n    \u003cdiv className=\"ui header\"\u003eFlirting With a Static Site\u003c/div\u003e\n\n    \u003cp\u003e\n      There are a lot of options for creating your own blog. It can be as simple\n      as loading up a new Wordpress site, or as involved as coding the full\n      stack yourself. I discovered there are also options inbetween. For\n      example, Gatsby JS lets you build a static site with React and GraphQL.\n      This setup virtually eliminates the need for a backend like Rails.\n    \u003c/p\u003e\n\n    \u003cp\u003e\n      I ultimately decided not to build my blog using Gatsby. The Gatsby\n      community is not as developed as Rails and you have to learn GraphQL to\n      get started.\n    \u003c/p\u003e\n\n    \u003cdiv className=\"ui header\"\u003eClosing Thoughts\u003c/div\u003e\n\n    \u003cp\u003eThank you for reading this post. I am currently working on my final Flatiron \n    project and can't wait to share the details soon.\u003c/p\u003e",
      "February 6, 2019",
      "https://images.unsplash.com/photo-1498931299472-f7a63a5a1cfa?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=1353\u0026q=80",
      "2019-02-06 15:20:33.635605",
      "2019-02-06 15:20:33.635605"
    ],
    [
      33,
      "Async Timer",
      "  \u003ch1\u003eECMAScript\u003c/h1\u003e\n\n    \u003cp\u003eWe spent a lot of time at Flatiron learning about ES6 features\n    (arrow functions, spread operators, etc.). Today I decided to explore\n    features from subsequent ECMAScript versions and built \n\u003ca href=\"https://codepen.io/edezekiel/pen/PgKwKe?editors=1111\"\u003ethis\u003c/a\u003e app!\n    \u003c/p\u003e\n\n    \u003cp\u003eES6 and ECMAScript don't sound familiar to you, then check out\n    \u003ca href=\"https://medium.com/@madasamy/javascript-brief-history-and-ecmascript-es6-es7-es8-features-673973394df4\"\u003ethis\u003c/a\u003e\n    great overview on Medium. This article summarizes a lot of the major new\n    features from ES6 through ES9\u003c/p\u003e\n\n    \u003ch1\u003eAsync Functions\u003c/h1\u003e\n\n    \u003cp\u003eI was drawn to the Async Functions feature from ES9. I've seen async/await\n    functions before, but until now I haven't used this syntax.\u003c/p\u003e\n\n    \u003cp\u003eMDN provides a great summary of the ES9 async function feature:\u003c/p\u003e\n\n      \u003cblockquote cite=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\"\u003e\n        The async function declaration defines an asynchronous function, which returns an AsyncFunction object. An asynchronous function is a function which operates asynchronously via the event loop, using an implicit Promise to return its result. But the syntax and structure of your code using async functions is much more like using standard synchronous functions.\n      \u003c/blockquote\u003e\n\n    \u003ch1\u003eAsync Timer\u003c/h1\u003e\n\n    \u003cp\u003ePer usual, MDN provides a concise example demonstrating how to use the\n    async syntax. I decided to modify this example into an async timer.\u003c/p\u003e\n\n    \u003cp\u003e\u003ca href=\"https://codepen.io/edezekiel/pen/PgKwKe?editors=1111\"\u003eHere\u003c/a\u003e\n    is a codepen to my example. I had a lot of fun making this timer. I really liked\n    seeing how powerful an async function can be a simple program.\u003c/p\u003e",
      "April 12, 2019",
      "https://images.unsplash.com/photo-1513544705284-99373737fab6?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=1101\u0026q=80",
      "2019-04-12 18:25:24.440429",
      "2019-04-12 18:25:24.440429"
    ],
    [
      34,
      "Moving to Memphis",
      "\u003cp\u003eI am incredibly excited to announce that I am moving to Memphis with my wife and two pups!\u003c/p\u003e\n\n\u003cimg src=\"https://media.giphy.com/media/26vUSolj2jF2m2c00/giphy.gif\" /\u003e\n\n\u003cp\u003eOnce things settle down I'll return to my regular blog format.\u003c/p\u003e\n\n\u003cp\u003eUntil then, I just want to say that I am so glad that I've been able to live in Atlanta for the past seven years. I've made lifelong friendships, worked at some great organizations, and followed my passion to software development. I can't wait to see what Memphis holds in store.\n\u003c/p\u003e",
      "April, 20, 2019",
      "https://images.unsplash.com/photo-1547585460-971eace56deb?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=1567\u0026q=80",
      "2019-04-20 14:04:13.827495",
      "2019-04-20 14:04:13.827495"
    ],
    [
      35,
      "Agile Software Development",
      "\u003cp\u003e\nI had a great time attending the Agile Memphis meetup this past week. It was presented by Robert Newman, Lean Agile Coach and IT Leader at FedEx. Robert focused his presentation on tips for becoming a better agile SAFe coach. SAFe stands for the Scaled Agile Framework. More on that later.\n\u003c/p\u003e\n\n\u003ch1\u003eMy Experience With Agile\u003c/h1\u003e\n\u003cp\u003e\nAgile development was \u003cem\u003ethe\u003c/em\u003e way we built software at Flatiron. We implemented Test Driven Development, Kanban Boards, Standup Meetings, and wireframing throughout the program. I used these methods to build each of my major projects.\n\u003c/p\u003e\n\n\u003ch1\u003eWhat is Agile Development?\u003c/h1\u003e\n\u003cp\u003e\nI recently listened to a podcast by Javascript Jabber on this topic. \u003ca href=\"https://devchat.tv/js-jabber/jsj-349-agile-development-the-technical-side-with-james-shore/\"\u003eHere\u003c/a\u003e is a link to the episode. The episode guest stars James Shore, agile developer extraordinaire. \n\u003c/p\u003e\n\n\u003cp\u003e\nJames Shore spent a fair amount of time discussing the evolution of Agile development. It was created in 2001 with the publication of the \u003ca href=\"https://agilemanifesto.org/\"\u003eAgile Manifesto\u003c/a\u003e. I definitely recommend this podcast if you are interested in the topic.\n\u003c/p\u003e\n\n\u003ch1\u003eSAFe Coaching\u003c/h1\u003e\n\u003cp\u003e\nBack to the meetup and SAFe, Robert described coaching frameworks and shared stories from his work as a SAFe coach. I especially enjoyed hearing about the distinction between a manager and a coach. \n\u003c/p\u003e\n\n\u003ch1\u003eFinal Thoughts\u003c/h1\u003e\n\u003cp\u003e\nAgile software development is a practice that I will continue to practice throughout my dev journey. I am especially interested in getting practice writing more tests for React programs. \n\u003c/p\u003e\n",
      "April 27, 2019",
      "https://images.unsplash.com/photo-1541960071727-c531398e7494?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=750\u0026q=80",
      "2019-04-27 22:14:31.759753",
      "2019-04-27 22:14:31.759753"
    ],
    [
      36,
      "Javascript Testing With Mocha",
      "\u003ch1\u003eJavascript Testing\u003c/h1\u003e\n\n\u003cp\u003eOne of my favorite parts about going to a coding bootcamp\nwas all the automated tests. It was incredibly helpful to see whether\nmy code contained errors, and to get hints about what might be causing\nthose errors.\u003c/p\u003e\n\n\u003cp\u003eNow that I've graduated it's up to me to write those tests for\nmy own projects!\u003c/p\u003e\n\n\u003cp\u003eI had written some Ruby tests using Capybara, so now I wanted to\ntry my hand at writing Javascript tests.\u003c/p\u003e\n\n\u003ch1\u003eMocha\u003c/h1\u003e\n\n\u003cp\u003eIn honor of \"May the 4th Be With You\" my alternative title for this post is \"May the Mocha Be With You.\" I found that Mocha was easy to get up and running and a pleasure to use.\n\u003c/p\u003e\n\n\u003cp\u003eMocha is a Javascript testing framework. It works for testing JS\nin the browser, as well as JS that is executed in a node JS environment.\u003c/p\u003e\n\n\n\u003ch1\u003eMy First Mocha Test\u003c/h1\u003e\n\n  \u003cp\u003eI decided to write a Mocha test that would be executed in the node JS environment.\u003c/p\u003e\n  \u003cp\u003eHere is the code:\u003c/p\u003e\n  \u003cpre\u003e\u003ccode\u003e\n    // Require the built in 'assertion' library\n    var assert = require('assert');\n\n    describe('Compare', function() {\n      describe('Star Wars Quotes', function() {\n        it('should test whether two data types are equivalent ', function() {\n          assert.equal(true, typeof \"May the Fourth Be With You\" === typeof \"Help me Obi Wan Kenobi, you're my only hope\")\n        })\n      })\n    })\n\n  \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis test passes, because both operands are strings, so function will return the expected output of true.\u003c/p\u003e\n\n\u003ch1\u003eLessons Learned\u003c/h1\u003e\n\u003cp\u003eThe Getting Started guide on \u003ca href=\"https://mochajs.org/#getting-started\"\u003emochajs.org\u003c/a\u003e\n  has very basic instructions on how to get you're first Mocha test running.\u003c/p\u003e\n\n  \u003cp\u003eHowever, I kept getting an error message about my package.json file whenever I tried to run \"npm test.\"\n    The error message claimed \"no such file or directory\" existed. Eventually I ran the command \"npm init\" from within the project directory. That created a package.json file within my project directory and that fixed the problem.\u003c/p\u003e\n\n\u003ch1\u003eResources\u003c/h1\u003e\n\n\u003cp\u003eThere are a lot of great resources out there to learn Mocha if you are interested.\nOf course, there is the official documentation at\n\u003ca href=\"https://mochajs.org/#getting-started\"\u003emochajs.org\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThere is also a more in-depth tutorial on medium by\n\u003ca href=\"https://codeburst.io/how-to-test-javascript-with-mocha-the-basics-80132324752e\"\u003ecodeburst\u003c/a\u003e\u003c/p\u003e",
      "May 4, 2019",
      "https://images.unsplash.com/photo-1444418185997-1145401101e0?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=1991\u0026q=80",
      "2019-05-04 20:44:17.982659",
      "2019-05-04 20:44:17.982659"
    ],
    [
      37,
      "Javascript Testing, Part Two",
      "\u003cp\u003e This week I continued working on JavaScript testing. My goal was to build a few tests that would run in the browser, as opposed to the node environment.\n\u003c/p\u003e\n\n\u003cp\u003e\nThere are a lot of tutorials online that introduce Mocha broswer testing. \n\u003c/p\u003e\n\n\u003cp\u003e\nEventually I was able to get in-browser tests working! We had these tests at Flatiron but they were mostly pre-built. It was really satisfying to be able to implement this feature of test driven development. \n\u003c/p\u003e\n\n\u003cp\u003e\nMy next goal is to create tests for various JavaScript computer science problems. For example, I will write a mocha test to make sure my FizzBuzz solution is correct.\n\u003c/p\u003e\n",
      "May 10, 2019",
      "https://images.unsplash.com/photo-1542901689-8917f44e3541?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=1534\u0026q=80",
      "2019-05-10 21:11:51.768142",
      "2019-05-10 21:11:51.768142"
    ],
    [
      39,
      "Looping Using ES6 Syntax",
      "    \u003ch1\u003eJavaScript Loops Using \u003ccode\u003efor...of\u003c/code\u003e and \u003ccode\u003efor...in\u003c/code\u003e.\u003c/h1\u003e\n\n    \u003cp\u003eEarlier this week I was working on a coding problem that involved looping through\n      characters in strings. I wanted to loop over all the characters in two strings\n      to determine whether they were anagrams. This kind of task is common in\n      technical interview situations.\u003c/p\u003e\n\n      \u003cp\u003eThis made me take a closer look at Javascript for loops. I was especially\n      interested in the \u003ccode\u003efor...of\u003c/code\u003e and \u003ccode\u003efor...in\u003c/code\u003e loops,\n      so I wrote this post to share what I found out.\u003c/p\u003e\n\n    \u003ch2\u003eLooping Through Elements in a String using \u003ccode\u003efor...of\u003c/code\u003e\u003c/h2\u003e\n\n      \u003cp\u003eSo, what's a good way to accomplish this goal? One approach is to use a\n        traditional for loop:\u003c/p\u003e\n\n        \u003cblockquote\u003e\n          \u003ccode\u003e\n              for (let i = 0; i \u003c string.length; i++) {console.log(string.charAt(i))}\n          \u003c/code\u003e\n        \u003c/blockquote\u003e\n\n      \u003cp\u003eThis kind of for loop has been around in Javascript since its inception\n      twenty years ago. However, ES6 introduced some spiffy new syntax.\u003c/p\u003e\n\n      \u003cp\u003eSince the introduction of ES6, you can use a \u003ccode\u003efor...of\u003c/code\u003e loop:\u003c/p\u003e\n\n      \u003cblockquote \u003e\n        \u003ccode\u003efor (character of string) {console.log(character)}\u003c/code\u003e\n      \u003c/blockquote\u003e\n\n      \u003cp\u003eIsn't the \u003ccode\u003efor...of\u003c/code\u003e statement much easier to read than the traditional\n      for loop! It also requires less typing, which means less room for error.\u003c/p\u003e\n\n    \u003ch2\u003eAre \u003ccode\u003efor...of\u003c/code\u003e and \u003ccode\u003efor...in\u003c/code\u003e Interchangeable?\u003c/h2\u003e\n\n      \u003cp\u003eTLDR: No, they iterate over different things.\u003c/p\u003e\n\n      \u003cp\u003ePer MDN:\u003c/p\u003e\n\n      \u003cblockquote cite=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"\u003e\n\n        \u003cp\u003eThe \u003ccode\u003efor...of\u003c/code\u003e statement iterates over values that the\n        \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables\"\u003e\n          iterable object\u003c/a\u003e defines to be iterated over.\u003c/p\u003e\n\n        \u003cp\u003eThe \u003ccode\u003efor...in\u003c/code\u003e statement iterates over the\n          \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\"\u003e\n          enumerable properties\u003c/a\u003e of an object, in an arbitrary order.\n        \u003c/p\u003e\n\n      \u003c/blockquote\u003e\n\n    \u003ch2\u003eWhat is an \u003cem\u003eiterable object\u003c/em\u003e?\u003c/h2\u003e\n        \u003cp\u003eAn object is \u003cstrong\u003eiterable\u003c/strong\u003e if it defines its\n        iteration behavior, such as what values are looped over in a \u003ccode\u003efor...of\u003c/code\u003e\n        construct.\n        \u003c/p\u003e\n\n      \u003cp\u003eAn object defines its iteration behavior when the object (or one of its\n        prototypes up its prototype chain) has a property with a \u003ccode\u003eSymbol.iterator\u003c/code\u003e\n        key.\u003c/p\u003e\n\n      \u003cp\u003eHere are Javascript's built-in Iterables:\n          \u003cul\u003e\n            \u003cli\u003eString\u003c/li\u003e\n            \u003cli\u003eArray\u003c/li\u003e\n            \u003cli\u003eTypedArray\u003c/li\u003e\n            \u003cli\u003eMap\u003c/li\u003e\n            \u003cli\u003eSet\u003c/li\u003e\n          \u003c/ul\u003e\n      \u003c/p\u003e\n\n      \u003cblockquote\u003e\u003ccode\u003e\u003c/code\u003e\u003c/blockquote\u003e\n\n    \u003ch2\u003eWhat are \u003cem\u003eenumerable properties\u003c/em\u003e of an object?\u003c/h2\u003e\n\n      \u003cp\u003eAccording to MDN, enumerable properties are those \u003cem\u003eproperties\u003c/em\u003e whose\n        internal enumerable flag is set to true.\u003c/p\u003e\n\n      \u003cp\u003eThis was a little cryptic to me at first glance. How can you tell\n      whether an internal enumerable flag is set to true for a property?\u003c/p\u003e\n\n      \u003cp\u003eWell, it turns out that there is a method baked right into the Object.prototype\n      that answers this question. The method is called \u003ccode\u003epropertyIsEnumerable()\u003c/code\u003e.\u003c/p\u003e\n\n      \u003cp\u003eOnce again MDN has a great example demonstrating how to use this method to\n      check whether a specified property is enumerable. \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"\u003eHere\u003c/a\u003e is\n      a link to MDN's example.\u003c/p\u003e\n\n    \u003ch2\u003eBack to My Example\u003c/h2\u003e\n\n      \u003cp\u003eLet's take a look back at our example to confirm whether \u003ccode\u003efor...of\u003c/code\u003e\n        and/or \u003ccode\u003efor...in\u003c/code\u003e works:\u003c/p\u003e\n\n      \u003cblockquote\u003e\n        \u003ccode\u003e\n          let myString = \"valar morghulis\"\u003cbr\u003e\n          \u003cbr\u003e\n          \"hello world\"[Symbol.iterator]()\u003cbr\u003e\n          // StringIterator {}\u003cbr\u003e\n          \u003cbr\u003e\n          console.log(myString.propertyIsEnumerable([1]))\n          \u003cbr\u003e\n          // true\n        \u003c/code\u003e\n      \u003c/blockquote\u003e\n\n      \u003cp\u003eAs demonstrated above, strings have the Symbol.iterator method.\n        In addition, strings are indexed by character. Thus, you can use\n        \u003ccode\u003efor...of\u003c/code\u003e or a \u003ccode\u003efor...in\u003c/code\u003e statement to iterate over\n        characters in a string.\u003c/p\u003e",
      "May 17, 2019",
      "    https://images.unsplash.com/photo-1527266237111-a4989d028b4b?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=1650\u0026q=80",
      "2019-05-17 22:10:57.096136",
      "2019-05-17 22:10:57.096136"
    ],
    [
      41,
      "Becoming a Web Developer",
      "    \u003carticle\u003e\n\n        \u003cp\u003eOne year ago I was employed as an attorney in Atlanta, GA. Since\n          then I've quit my job, completed an immersive software engineering bootcamp,\n          moved to Memphis, TN, \u003cem\u003ebecome a father\u003c/em\u003e, and signed a contract to work as\n          a software engineer at an amazing Blockchain Development firm in Memphis, TN. \u003c/p\u003e\n\n        \u003cp\u003eI've already \u003ca href=\"https://www.edezekiel.com/about\"\u003ewritten\u003c/a\u003e\n          about why I transitioned from law to software engineering. This post\n          is my chance to thank everyone who supported me, share a few lessons\n          I learned along the way, and dream about what comes next.\u003c/p\u003e\n\n      \u003ch2\u003eI Couldn't Have Done It Alone\u003c/h2\u003e\n        \u003cp\u003eI am incredibly grateful to my family, friends, and colleagues who\n        supported me throughout this transition. I could not have done it without\n        them.\u003c/p\u003e\n\n        \u003cp\u003eFirst, I want to thank my wife Farley Ezekiel. She was supportive\n        every step of the way. Changing careers is a scary move, especially with\n        a newborn on the way, but Farley believed in me and encouraged me to\n        follow my dreams.\u003c/p\u003e\n\n        \u003cp\u003eOn top of that Farley gave me the most incredible gift I could ask for,\n        the gift of fatherhood (just in time for Father's Day):\u003c/p\u003e\n        \u003cimg src=\"https://i.imgur.com/GDaVsttm.jpg\" alt=\"baby\"\u003e\n\n        \u003cp\u003eSecond, thank you to my mom and to parents-in-law. Farley and I could not\n        have made the move to Memphis when we did without their support.\u003c/p\u003e\n\n        \u003cp\u003eThird, thank you to all the amazing instructors and staff at Flatiron (\n          Tammy, Brit, Rob, Emily, Ronny, Tez, Garry, ...), my cohort (Kwam, Andy, Kaeland,\n          Will, Cory, Blair, Paris), and my career advisory Mitzi. Each of you\n          inspired me to do better and gave me the skills to accomplish my goals.\n        \u003c/p\u003e\n\n        \u003cp\u003eFinally, thank you web3devs, for taking the chance on a bootcamp grad\n        without a CS degree.\u003c/p\u003e\n\n      \u003ch2\u003eLessons Learned\u003c/h2\u003e\n        \u003col\u003e\n          \u003cli\u003e\u003cstrong\u003eTry Before You Buy:\u003c/strong\u003e before I enrolled in a software development bootcamp,\n          I tried out Udemy courses, learning material from other bootcamps,\n          Free Code Camp, and other (mostly) free sources. Ultimately I felt like I\n          learned best using Flatiron's platform so I went with them.\u003c/li\u003e\n          \u003cli\u003e\u003cstrong\u003eInvest in Relationships:\u003c/strong\u003e The job I start on Monday was never posted.\n          I got it because I developed meaningful relationships with software\n          developers in my job market.\u003c/li\u003e\n          \u003cli\u003e\u003cstrong\u003eDon't Be Afraid:\u003c/strong\u003e there are lots of scary parts about starting a bootcamp or a\n          career in software development. Will I be good at it? Will I fit in\n          with the community? Will I like it? If you are really curious about\n          programming and want to learn more, don't let these doubts stop you.\u003c/li\u003e\n          \u003cli\u003e\u003cstrong\u003ePost Up:\u003c/strong\u003e I think this is true no matter what field you are in - if you\n          want to be successful you have to put in the work. This also applies to\n          your personal relationships. Make time for your friends and family, especially\n          when things get tough.\u003c/li\u003e\n        \u003c/ol\u003e\n\n      \u003ch2\u003eLooking Ahead\u003c/h2\u003e\n        \u003cp\u003eThere are so many things I want to learn going forward. I am particularly\n          interested in developing static sites, using serverless features like AWS lamda,\n          and learning the Express framework.\u003c/p\u003e\n\n        \u003cp\u003eI also hope to give back to the programming community and to Memphis.\n        If you are just starting your journey in software development I would be\n        happy to talk. Just reach out using one of the social media icons on this site.\u003c/p\u003e\n\n    \u003c/article\u003e",
      "June 1, 2019",
      "https://images.unsplash.com/photo-1480506132288-68f7705954bd?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=1693\u0026q=80",
      "2019-06-01 16:55:39.820226",
      "2019-06-01 16:55:39.820226"
    ],
    [
      40,
      "Building a Blazing Fast JAMstack App",
      "\u003cp\u003e\n      I recently attended a meetup in Memphis hosted by Bryan Robinson. He is an\n      accomplished web developer with a focus on\n      \u003ca\n        href=\"https://bryanlrobinson.com/blog/2019/04/26/client-work-and-the-jamstack/\"\n        \u003ecreating static sites\u003c/a\n      \u003e.\n    \u003c/p\u003e\n\n    \u003cp\u003e\n      This got me excited to finally build my own static site using JAMstack\n      architecture! So, I built this\n      \u003ca href=\"https://zealous-thompson-59a9ca.netlify.com/\"\n        \u003eblog template (live)\u003c/a\n      \u003e\n      using GatsbyJS and Netlify. Here is the\n      \u003ca href=\"https://github.com/edezekiel/gatsby-netlify-blog\"\u003eGithub Repo\u003c/a\u003e.\n    \u003c/p\u003e\n\n    \u003csection\u003e\n      \u003ch2\u003eLighthouse Audit\u003c/h2\u003e\n\n      \u003cp\u003e\n        I am very pleased with how the site turned out. I used the Lighthouse\n        tool to audit the gatsby site and my blog. Lighthouse is built into the\n        chrome browser. It is a great automated tool for performing webpage\n        audits.\n      \u003c/p\u003e\n      \u003cp\u003eHere are the results:\u003c/p\u003e\n      \u003ch3\u003eLighthouse scores for my React/Rails blog:\u003c/h3\u003e\n      \u003cimg src=\"https://i.imgur.com/md5bX64l.png\" alt=\"rails-audit\" /\u003e\n\n      \u003cp\u003e\n        The scores are not terrible, but there is definitely room for\n        improvement.\n      \u003c/p\u003e\n\n      \u003ch3\u003eLighthouse scores for the JAMstack site:\u003c/h3\u003e\n\n      \u003cimg src=\"https://i.imgur.com/93kkJ1Zl.png\" alt=\"gatsby-audit\" /\u003e\n\n      \u003cp\u003e\n        The JAMstack site almost scores perfectly across the Lighthouse metrics.\n        Navigating through the site reflects these scores: pages loading\n        blazingly fast and it generally feels crisp.\n      \u003c/p\u003e\n\n    \u003c/section\u003e\n\n    \u003csection\u003e\n      \u003ch2\u003eResources\u003c/h2\u003e\n      \u003cp\u003e\n        If you are interesting in exploring JAMstack further, here are some of\n        resources I used while learning about this topic:\n      \u003c/p\u003e\n      \u003cul\u003e\n        \u003cli\u003e\n          \u003ca href=\"https://jamstack.wtf/#getting-started\"\u003eWTF is JAMstack?\u003c/a\u003e a\n          straightforward primer on the JAMstack architecture.\n        \u003c/li\u003e\n        \u003cli\u003e\n          \u003ca href=\"https://www.gatsbyjs.org/tutorial/\"\u003eGatsby Tutorial\u003c/a\u003e: This\n          will walk you through your first Gatsby app. There are plenty of\n          \"starters\" on the site to help you get your first site up and running.\n          I personally used the\n          \u003ca href=\"https://github.com/gatsbyjs/gatsby-starter-default\"\n            \u003egatsby default starter\u003c/a\n          \u003e.\n        \u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"https://www.netlify.com/\"\u003eNetlify\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\n          \u003ca\n            href=\"https://www.taniarascia.com/migrating-from-wordpress-to-gatsby/\"\n            \u003eTania Rascia\u003c/a\n          \u003e: aka my web dev hero.\n        \u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/section\u003e",
      "May 24, 2019",
      "https://images.unsplash.com/photo-1529840882932-55f06ab2c681?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=1651\u0026q=80",
      "2019-05-24 16:54:13.295878",
      "2019-05-24 16:54:13.295878"
    ],
    [
      42,
      "Coding Tips For New Web Developers.",
      "      \u003cp\u003e\n        If you follow my blog you know that I recently graduated from a coding\n        bootcamp and started work as a web developer.\n      \u003c/p\u003e\n\n      \u003cp\u003e\n        I can't believe I've been on the job about a month already! Here are\n        some of the tips and pitfalls I've come across during my first month.\n      \u003c/p\u003e\n\n      \u003ch2\u003eReact Hooks are Amazing\u003c/h2\u003e\n\n      \u003cp\u003e\n        The first project I worked at at web3devs used React Hooks extensively.\n        Before working at web3devs I had been putting off learning hooks. I\n        didn't see the point of adding Hooks when React already seemed to work\n        fine.\n      \u003c/p\u003e\n\n      \u003cp\u003e\n        After using hooks for a few weeks, I intend on using them in every React\n        project moving forward. I love being able to forget about class\n        components. My favorite part about JavaScript is the emphasis on\n        functional programming. React hooks do a great job of building on top of\n        this programming style.\n      \u003c/p\u003e\n\n      \u003cp\u003e\n        I find that my components are more composable, flexible, and fun to use.\n      \u003c/p\u003e\n\n      \u003ch2\u003e\n        HTML5 has a Built-in API for Form Validation, But Use Cases Are Limited.\n      \u003c/h2\u003e\n\n      \u003cp\u003e\n        If you've ever added \u003ccode\u003erequired\u003c/code\u003e to an input field, then\n        you've used HTML5's built-in api for form validation.\n        \u003ccode\u003erequired\u003c/code\u003e is a simple way to prevent a user from submitting\n        a form if they, e.g., forgot to enter their email in the form. If the\n        use clicks submit, a standard message will pop up telling the user that\n        the field is required.\n      \u003c/p\u003e\n\n      \u003cp\u003e\n        However, using the native HTML5 form validation causes some issues when\n        you're working in a react project. Specifically, it gives the browser's\n        DOM control over input fields (making it an uncontrolled component),\n        whereas most react forms should use the virtual DOM (making it a\n        controlled component).\n      \u003c/p\u003e\n\n      \u003cp\u003e\n        One of my favorite bloggers,\n        \u003ca href=\"https://flaviocopes.com/react-forms/\"\u003eFlavio Copes\u003c/a\u003e,\n        eloquently explains the importance of controlled components:\n      \u003c/p\u003e\n\n      \u003cblockquote cite=\"https://flaviocopes.com/react-forms/\"\u003e\n        \u003cp\u003e\n          There are two main ways of handling forms in React, which differ on a\n          fundamental level: how data is managed.\n        \u003c/p\u003e\n        \u003cul\u003e\n          \u003cli\u003e\n            if the data is handled by the DOM, we call them uncontrolled\n            components\n          \u003c/li\u003e\n          \u003cli\u003e\n            if the data is handled by the components we call them controlled\n            components\n          \u003c/li\u003e\n        \u003c/ul\u003e\n\n        \u003cp\u003e\n          As you can imagine, controlled components is what you will use most of\n          the time.\n        \u003c/p\u003e\n      \u003c/blockquote\u003e\n\n      \u003cp\u003e\n        Sonny Recio\n        \u003ca\n          href=\"https://codeburst.io/how-to-use-html5-form-validations-with-react-4052eda9a1d4\"\n          \u003eexplains\u003c/a\n        \u003e\n        that \"[w]e’re potentially violating React’s design patterns while doing\n        so as we’re accessing the DOM properties using native javascript.\"\n      \u003c/p\u003e\n\n      \u003cp\u003e\n        My personal approach is to add \u003ccode\u003erequired\u003c/code\u003e to a form input,\n        then use the \u003ccode\u003e.checkValidity()\u003c/code\u003e api in the handleSubmit\n        function.\n      \u003c/p\u003e\n\n      \u003ch2\u003eUse \u003ccode\u003egit mv\u003c/code\u003e To Rename and Move Files\u003c/h2\u003e\n\n      \u003cp\u003e\n        The toughest bug I've ran into so far was a \u003ccode\u003egit merge\u003c/code\u003e issue\n        caused because I didn't use \u003ccode\u003egit mv\u003c/code\u003e. Using\n        \u003ccode\u003e git mv\u003c/code\u003e to rename and move files lets you be explicit about\n        your intention and helps to avoid some errors.\n      \u003c/p\u003e\n\n      \u003cp\u003e\n        Here is a fantastic\n        \u003ca href=\"https://koukia.ca/rename-or-move-files-in-git-e7259bf5a0b7\"\n          \u003earticle on git mv\u003c/a\n        \u003e\n        explaining this issue. And no I didn't find this article until after I\n        resolved the bug. 😞.\n      \u003c/p\u003e\n\n      \u003ch2\u003eGit projects are case-insensitive by Default.\u003c/h2\u003e\n\n      \u003cp\u003e\n        When you initilize git in a project directory it automatically creates a\n        config file. In that config file, you will see a line that says\n        \u003ccode\u003e ignorecase = true\u003c/code\u003e. This means that if you rename a folder\n        from \"Components\" to \"components\", on GitHub the folder will still be\n        called \"Components.\"\n      \u003c/p\u003e\n\n      \u003cp\u003e\n        This issue came up simultaneously with my \u003ccode\u003egit mv\u003c/code\u003e bug, which\n        lead to some very interesting behavior.\n      \u003c/p\u003e",
      "June 26, 2019",
      "https://images.unsplash.com/photo-1556075798-4825dfaaf498?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=1655\u0026q=80",
      "2019-06-26 15:59:56.952967",
      "2019-06-26 15:59:56.952967"
    ],
    [
      43,
      "Live Stellar Wallet for Testing Smart Contracts",
      "    \u003carticle\u003e\n      \u003ch1\u003e\n        Stellar Wallet for Testing Mutisignature Escrow Account with Time Lock \u0026\n        Recovery.\n      \u003c/h1\u003e\n\n      \u003cp\u003e\n        I am very happy to announce the\n        \u003ca href=\"https://stellar-wallet.netlify.com/account\"\u003eLive\u003c/a\u003e version of\n        my open-source Stellar testnet wallet. Here is the code on\n        \u003ca href=\"https://github.com/edezekiel/stellar-wallet\"\u003eGithub\u003c/a\u003e.\n      \u003c/p\u003e\n\n      \u003cp\u003e\n        This is for Stellar enthusiasts and anyone working on stellar smart\n        contracts. Below, I'll (1) explain why this tool is useful, (2) discuss\n        some background information about Stellar smart contracts, (3) provide\n        short answers to some of the most challenging questions I faced during\n        development, (4) give brief instructions on how to use this tool, and\n        (5) list some resources that I found helpful.\n      \u003c/p\u003e\n\n      \u003cp\u003e\n        \u003cstrong\u003eDisclaimer\u003c/strong\u003e:\n        \u003cem\u003e\n          I built this as an educational experiment and the program has not been\n          thoroughly tested.\u003c/em\n        \u003e\n      \u003c/p\u003e\n\n      \u003ch2\u003e1. Why Build this Stellar Tool?\u003c/h2\u003e\n\n      \u003cp\u003e\n        I work at a blockchain development company called\n        \u003ca href=\"https://web3devs.com/\"\u003eweb3devs\u003c/a\u003e. We're probably most well\n        known for our work on Ethereum smart contracts, but we also work with\n        Stellar smart contracts!\n      \u003c/p\u003e\n\n      \u003cp\u003e\n        Although Stellar.org explains the concepts behind\n        \u003ca\n          href=\"https://www.stellar.org/developers/guides/walkthroughs/stellar-smart-contracts.html\"\n          \u003eMutisignature Escrow Account with Time Lock \u0026 Recovery\u003c/a\n        \u003e, and provides\n        \u003ca\n          href=\"https://www.stellar.org/developers/js-stellar-base/reference/base-examples.html\"\n          \u003eexample code\n        \u003c/a\u003e\n        for creating a multi-sig account, they do not show how to implement the\n        time lock or recovery methods.\n        \u003cstrong\n          \u003eWith this post, I am releasing that code and a live demonstration of\n          how it works.\u003c/strong\n        \u003e\n      \u003c/p\u003e\n\n      \u003ch2\u003e2. Background Information\u003c/h2\u003e\n\n      \u003cp\u003e\n        Most applications interact with the Stellar network through Horizon, a\n        RESTful HTTP API server. See\n        \u003ca href=\"https://www.stellar.org/developers/guides/get-started/\"\n          \u003eStellar.org\u003c/a\n        \u003e. You use a SDK to interact with Horizon. I used the Javascript SDK.\n      \u003c/p\u003e\n\n      \u003cp\u003e\n        There are significant differences between Ethereum and Stellar smart\n        contracts. For one thing, Ethereum smart contracts are written in\n        Solidity, which is a Turing-complete language.\n      \u003c/p\u003e\n\n      \u003cp\u003e\n        In contrast, stellar smart contracts can only accomplish a limited set\n        of tasks. You use a common programming language like JavaScript or Go to\n        You interact with Horizon, which is an interface between Stellar Core\n        and applications that want to access the Stellar network.\n      \u003c/p\u003e\n\n      \u003ch2\u003e3. Pernicious Bugs and Tricky Questions\u003c/h2\u003e\n\n      \u003ch4\u003e\n        Why Does My Transaction Keep Failing (Getting 400 Response from\n        Horizon)?\n      \u003c/h4\u003e\n\n      \u003col\u003e\n        \u003cli\u003e\n          You didn't set the base fee:\n          \u003cpre\u003e\u003ccode\u003e\n    const baseFee = await server.fetchBaseFee();\n\n    const transaction = new StellarSdk.TransactionBuilder(account, {\n    fee: baseFee })\n          \u003c/code\u003e\u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003e\n          You didn't load the account before building the transaction:\n          \u003cpre\u003e\u003ccode\u003e\n    const account = await server.loadAccount(sourceKeys.publicKey());\n    const transaction = new StellarSdk.TransactionBuilder(account, { fee: baseFee })\n          \u003c/code\u003e\u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003eWhy Can't I submit the\u003c/li\u003e\n      \u003c/ol\u003e\n\n      \u003ch4\u003eWhy can't I submit the Unlock XDR to Horizon?\u003c/h4\u003e\n      \u003cp\u003e\n        You may be trying to submit the XDR too early. The unlock XDR can only\n        be submitted \u003cem\u003eafter\u003c/em\u003e the lock-up period is over. This is a little\n        confusing, because you have to create the unlock transaction\n        \u003cem\u003ebefore\u003c/em\u003e the lock-up period is over.\n      \u003c/p\u003e\n\n      \u003cp\u003e\n        The solution is signing the unlock transaction, and saving that\n        transaction somewhere publicly. Only submit the unlock xdr to Horizon\n        once the lock up period is over.\n      \u003c/p\u003e\n\n      \u003cpre\u003e\u003ccode\u003e\n    try {\n      // Save as an XDR string\n      const transactionXDR = transaction\n        .toEnvelope()\n        .toXDR()\n        .toString(\"base64\");\n      console.log(\"FN: unlock\", \"Success! Results:\", transactionXDR);\n      return transactionXDR;\n      \u003c/code\u003e\u003c/pre\u003e\n\n      \u003ch4\u003eHow do I set timebounds?\u003c/h4\u003e\n\n      \u003cp\u003e\n        It was not easy to figure out the syntax for setting timebounds. Here is\n        what finally worked for me:\n      \u003c/p\u003e\n\n      \u003cpre\u003e\u003ccode\u003e\n    // The unlock date (D+T) is the first date that the unlock transaction can be\n    // submitted. If Transaction 3 (this transaction) is submitted before the\n    // unlock date, the transaction will not be valid.\n\n    const transaction = new StellarSdk.TransactionBuilder(escrowAccount, {\n      fee: baseFee,\n      timebounds: {\n        minTime: (\n          Math.floor(Date.now() / 1000) + parseInt(unlockTx.unlockDate)\n        ).toString(),\n        // The maximum time is set to 0, to denote that the transaction does not have\n        // an expiration date.\n        maxTime: (0).toString()\n      },\n      sequence: (parseInt(escrowAccount.sequence) + 1).toString()\n    })\n        \u003c/code\u003e\u003c/pre\u003e\n      \u003ch2\u003e4. Instructions\u003c/h2\u003e\n\n      \u003cp\u003e\n        In order to use this tool you'll need to create at least two testnet\n        accounts. You can make new accounts within the tool by clicking the\n        \"Create Stellar Account\" button. Just take note of the public and\n        private keys that pop up in the header. You can also use these pre-made\n        test accounts:\n      \u003c/p\u003e\n\n      \u003csection\u003e\n        \u003ch4\u003eSeller/Destination\u003c/h4\u003e\n        \u003cp\u003e\n          Public Key: GCHVXWBLCPWRMAF7QNKPB22JJX6VYTMX2JQ5XAVMEM6PD5HRHF42EZIC\n          SecretKey: SAI2UOI47OBALUI4YAUVPZ3QN3LTYM5CXP3MEKGQR64OWVSLT6M7Q2VK\n        \u003c/p\u003e\n        \u003ch4\u003eBuyer\u003c/h4\u003e\n        \u003cp\u003e\n          Public Key: GDEJU3BKAPMDP3SAXEE5C5T2IE6363ZSZMR7SS3YZTOQJZ3L24YJSZ4G\n          Secret Key: SDCS7UCINHWVEWFUNHRXZRUU5WQ7ZAIPHXQNED4IBQ2U6Y45W72U22ST\n        \u003c/p\u003e\n      \u003c/section\u003e\n      \u003cp\u003e\n        \u003cstrong\u003eNote:\u003c/strong\u003e these are test accounts so no real money is\n        involved. You should never post a secret key to an account on the public\n        stellar server.\n      \u003c/p\u003e\n      \u003cp\u003e\n        You can image one account as a \"seller\" (the Destination), and another\n        as a \"buyer\". The buyer creates the escrow account and adds the seller\n        (Destination) as a signer. When the lockout period expires the seller\n        can use the XDR to \"unlock\" funds in the escrow account.\n      \u003c/p\u003e\n\n      \u003ch2\u003e5. Resources:\u003c/h2\u003e\n\n      \u003cp\u003eHere are some of the resources I found helpful:\u003c/p\u003e\n      \u003cul\u003e\n        \u003cli\u003e\n          \u003ca href=\"https://www.stellar.org/laboratory/\"\u003eStellar Laboratory: \u003c/a\u003e\n          I constantly had this tab open to test various operations,\n          transactions, etc.\n        \u003c/li\u003e\n\n        \u003cli\u003e\n          \u003ca\n            href=\"https://medium.com/wearetheledger/stellar-escrow-smart-contract-development-4c43ef32ac4b\"\n            \u003eMichiel Mulders Article:\u003c/a\n          \u003e\n          Helps you get a little more familiar with the concept of account\n          signers.\n        \u003c/li\u003e\n        \u003cli\u003e\n          \u003ca\n            href=\"https://medium.com/coinmonks/simple-escrow-contract-using-stellar-67aa799f7db\"\n            \u003eSylvain Faucherand Article:\u003c/a\n          \u003e\n          Covers a basic escrow account, but doesn't address how to make it\n          time-locked.\n        \u003c/li\u003e\n        \u003cli\u003e\n          \u003ca\n            href=\"https://hackernoon.com/i-just-wrote-a-stellar-smart-contract-pt-2-lets-dive-a-little-deeper-a8dae19b9d0a\"\n            \u003eRobert Durst Article:\u003c/a\n          \u003e\n          If you're still scratching your head about account signatures.\n        \u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/article\u003e",
      "July 23, 2019",
      "https://images.unsplash.com/photo-1516849841032-87cbac4d88f7?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=1650\u0026q=80",
      "2019-07-23 21:15:07.804933",
      "2019-07-23 21:15:07.804933"
    ]
  ]
}
